/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 12 03:27:56 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
//import static org.evosuite.runtime.EvoAssertions.*;
//import org.evosuite.runtime.EvoRunner;
//import org.evosuite.runtime.EvoRunnerParameters;
//import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayExamples_ESTest /*extends ArrayExamples_ESTest_scaffolding*/ {

  //Test case number: 0
  /*
   * 75 covered goals:
   * Goal 1. ArrayExamples.findMin([I)I: I3 Branch 1 IFNE L27 - false
   * Goal 2. ArrayExamples.findMin([I)I: I5 Branch 2 IFNULL L27 - false
   * Goal 3. ArrayExamples.findMin([I)I: I8 Branch 3 IFGT L27 - true
   * Goal 4. ArrayExamples.findMin([I)I: I27 Branch 4 IF_ICMPLE L30 - true
   * Goal 5. ArrayExamples.goodResize([II)[I: I3 Branch 6 IFNE L46 - false
   * Goal 6. ArrayExamples.goodResize([II)[I: I5 Branch 7 IFNULL L46 - false
   * Goal 7. ArrayExamples.goodResize([II)[I: I7 Branch 8 IFGE L46 - true
   * Goal 8. ArrayExamples.goodResize([II)[I: I33 Branch 9 IF_ICMPGE L51 - true
   * Goal 9. Branch ArrayExamples.findMin([I)I: I8 Branch 3 IFGT L27 - true in context: ArrayExamples:findMin([I)I
   * Goal 10. Branch ArrayExamples.findMin([I)I: I5 Branch 2 IFNULL L27 - false in context: ArrayExamples:findMin([I)I
   * Goal 11. Branch ArrayExamples.findMin([I)I: I3 Branch 1 IFNE L27 - false in context: ArrayExamples:findMin([I)I
   * Goal 12. Branch ArrayExamples.findMin([I)I: I27 Branch 4 IF_ICMPLE L30 - true in context: ArrayExamples:findMin([I)I
   * Goal 13. Branch ArrayExamples.goodResize([II)[I: I3 Branch 6 IFNE L46 - false in context: ArrayExamples:goodResize([II)[I
   * Goal 14. Branch ArrayExamples.goodResize([II)[I: I7 Branch 8 IFGE L46 - true in context: ArrayExamples:goodResize([II)[I
   * Goal 15. Branch ArrayExamples.goodResize([II)[I: I5 Branch 7 IFNULL L46 - false in context: ArrayExamples:goodResize([II)[I
   * Goal 16. Branch ArrayExamples.goodResize([II)[I: I33 Branch 9 IF_ICMPGE L51 - true in context: ArrayExamples:goodResize([II)[I
   * Goal 17. [Output]: ArrayExamples.findMin([I)I:Zero
   * Goal 18. [Output]: ArrayExamples.goodResize([II)[I:NonEmptyArray
   * Goal 19. ArrayExamples.findMin([I)I: Line 27
   * Goal 20. ArrayExamples.findMin([I)I: Line 29
   * Goal 21. ArrayExamples.findMin([I)I: Line 30
   * Goal 22. ArrayExamples.findMin([I)I: Line 36
   * Goal 23. ArrayExamples.goodResize([II)[I: Line 46
   * Goal 24. ArrayExamples.goodResize([II)[I: Line 48
   * Goal 25. ArrayExamples.goodResize([II)[I: Line 49
   * Goal 26. ArrayExamples.goodResize([II)[I: Line 51
   * Goal 27. ArrayExamples.goodResize([II)[I: Line 55
   * Goal 28. [METHOD] ArrayExamples.findMin([I)I
   * Goal 29. [METHOD] ArrayExamples.goodResize([II)[I
   * Goal 30. [METHODNOEX] ArrayExamples.findMin([I)I
   * Goal 31. [METHODNOEX] ArrayExamples.goodResize([II)[I
   * Goal 32. Weak Mutation 183: ArrayExamples.findMin([I)I:27 - InsertUnaryOp Negation
   * Goal 33. Weak Mutation 184: ArrayExamples.findMin([I)I:27 - ReplaceComparisonOperator != -> ==
   * Goal 34. Weak Mutation 185: ArrayExamples.findMin([I)I:27 - ReplaceComparisonOperator = null -> != null
   * Goal 35. Weak Mutation 186: ArrayExamples.findMin([I)I:27 - ReplaceComparisonOperator > -> -2
   * Goal 36. Weak Mutation 190: ArrayExamples.findMin([I)I:29 - ReplaceConstant - 0 -> 1
   * Goal 37. Weak Mutation 191: ArrayExamples.findMin([I)I:30 - ReplaceConstant - 1 -> 0
   * Goal 38. Weak Mutation 192: ArrayExamples.findMin([I)I:30 - ReplaceVariable i -> indexOfMin
   * Goal 39. Weak Mutation 193: ArrayExamples.findMin([I)I:30 - InsertUnaryOp Negation of i
   * Goal 40. Weak Mutation 194: ArrayExamples.findMin([I)I:30 - InsertUnaryOp IINC 1 i
   * Goal 41. Weak Mutation 195: ArrayExamples.findMin([I)I:30 - InsertUnaryOp IINC -1 i
   * Goal 42. Weak Mutation 197: ArrayExamples.findMin([I)I:30 - ReplaceComparisonOperator <= -> <
   * Goal 43. Weak Mutation 215: ArrayExamples.findMin([I)I:36 - InsertUnaryOp Negation of indexOfMin
   * Goal 44. Weak Mutation 216: ArrayExamples.findMin([I)I:36 - InsertUnaryOp IINC 1 indexOfMin
   * Goal 45. Weak Mutation 217: ArrayExamples.findMin([I)I:36 - InsertUnaryOp IINC -1 indexOfMin
   * Goal 46. Weak Mutation 218: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp Negation
   * Goal 47. Weak Mutation 219: ArrayExamples.goodResize([II)[I:46 - ReplaceComparisonOperator != -> ==
   * Goal 48. Weak Mutation 220: ArrayExamples.goodResize([II)[I:46 - ReplaceComparisonOperator = null -> != null
   * Goal 49. Weak Mutation 221: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp Negation of newSize
   * Goal 50. Weak Mutation 222: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp IINC 1 newSize
   * Goal 51. Weak Mutation 223: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp IINC -1 newSize
   * Goal 52. Weak Mutation 225: ArrayExamples.goodResize([II)[I:46 - ReplaceComparisonOperator >= -> ==
   * Goal 53. Weak Mutation 228: ArrayExamples.goodResize([II)[I:48 - InsertUnaryOp Negation of newSize
   * Goal 54. Weak Mutation 229: ArrayExamples.goodResize([II)[I:48 - InsertUnaryOp IINC 1 newSize
   * Goal 55. Weak Mutation 230: ArrayExamples.goodResize([II)[I:48 - InsertUnaryOp IINC -1 newSize
   * Goal 56. Weak Mutation 231: ArrayExamples.goodResize([II)[I:49 - ReplaceVariable list -> result
   * Goal 57. Weak Mutation 232: ArrayExamples.goodResize([II)[I:49 - InsertUnaryOp Negation of newSize
   * Goal 58. Weak Mutation 233: ArrayExamples.goodResize([II)[I:49 - InsertUnaryOp IINC 1 newSize
   * Goal 59. Weak Mutation 234: ArrayExamples.goodResize([II)[I:49 - InsertUnaryOp IINC -1 newSize
   * Goal 60. Weak Mutation 235: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> 0
   * Goal 61. Weak Mutation 236: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> 1
   * Goal 62. Weak Mutation 237: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> -1
   * Goal 63. Weak Mutation 238: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> 2
   * Goal 64. Weak Mutation 239: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> 4
   * Goal 65. Weak Mutation 240: ArrayExamples.goodResize([II)[I:51 - ReplaceVariable i -> limit
   * Goal 66. Weak Mutation 241: ArrayExamples.goodResize([II)[I:51 - ReplaceVariable i -> newSize
   * Goal 67. Weak Mutation 242: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp Negation of i
   * Goal 68. Weak Mutation 243: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp IINC 1 i
   * Goal 69. Weak Mutation 244: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp IINC -1 i
   * Goal 70. Weak Mutation 245: ArrayExamples.goodResize([II)[I:51 - ReplaceVariable limit -> i
   * Goal 71. Weak Mutation 247: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp Negation of limit
   * Goal 72. Weak Mutation 248: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp IINC 1 limit
   * Goal 73. Weak Mutation 249: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp IINC -1 limit
   * Goal 74. Weak Mutation 252: ArrayExamples.goodResize([II)[I:51 - ReplaceComparisonOperator >= -> ==
   * Goal 75. Weak Mutation 267: ArrayExamples.goodResize([II)[I:55 - ReplaceVariable result -> list
   */

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayExamples.goodResize(intArray0, 1);
      int int0 = ArrayExamples.findMin(intArray1);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray1);
  }

  //Test case number: 1
  /*
   * 46 covered goals:
   * Goal 1. ArrayExamples.goodResize([II)[I: I3 Branch 6 IFNE L46 - false
   * Goal 2. ArrayExamples.goodResize([II)[I: I5 Branch 7 IFNULL L46 - false
   * Goal 3. ArrayExamples.goodResize([II)[I: I7 Branch 8 IFGE L46 - true
   * Goal 4. ArrayExamples.goodResize([II)[I: I33 Branch 9 IF_ICMPGE L51 - true
   * Goal 5. Branch ArrayExamples.goodResize([II)[I: I3 Branch 6 IFNE L46 - false in context: ArrayExamples:goodResize([II)[I
   * Goal 6. Branch ArrayExamples.goodResize([II)[I: I7 Branch 8 IFGE L46 - true in context: ArrayExamples:goodResize([II)[I
   * Goal 7. Branch ArrayExamples.goodResize([II)[I: I5 Branch 7 IFNULL L46 - false in context: ArrayExamples:goodResize([II)[I
   * Goal 8. Branch ArrayExamples.goodResize([II)[I: I33 Branch 9 IF_ICMPGE L51 - true in context: ArrayExamples:goodResize([II)[I
   * Goal 9. [Output]: ArrayExamples.goodResize([II)[I:EmptyArray
   * Goal 10. ArrayExamples.goodResize([II)[I: Line 46
   * Goal 11. ArrayExamples.goodResize([II)[I: Line 48
   * Goal 12. ArrayExamples.goodResize([II)[I: Line 49
   * Goal 13. ArrayExamples.goodResize([II)[I: Line 51
   * Goal 14. ArrayExamples.goodResize([II)[I: Line 55
   * Goal 15. [METHOD] ArrayExamples.goodResize([II)[I
   * Goal 16. [METHODNOEX] ArrayExamples.goodResize([II)[I
   * Goal 17. Weak Mutation 218: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp Negation
   * Goal 18. Weak Mutation 219: ArrayExamples.goodResize([II)[I:46 - ReplaceComparisonOperator != -> ==
   * Goal 19. Weak Mutation 220: ArrayExamples.goodResize([II)[I:46 - ReplaceComparisonOperator = null -> != null
   * Goal 20. Weak Mutation 221: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp Negation of newSize
   * Goal 21. Weak Mutation 222: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp IINC 1 newSize
   * Goal 22. Weak Mutation 223: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp IINC -1 newSize
   * Goal 23. Weak Mutation 226: ArrayExamples.goodResize([II)[I:46 - ReplaceComparisonOperator >= -> >
   * Goal 24. Weak Mutation 228: ArrayExamples.goodResize([II)[I:48 - InsertUnaryOp Negation of newSize
   * Goal 25. Weak Mutation 229: ArrayExamples.goodResize([II)[I:48 - InsertUnaryOp IINC 1 newSize
   * Goal 26. Weak Mutation 230: ArrayExamples.goodResize([II)[I:48 - InsertUnaryOp IINC -1 newSize
   * Goal 27. Weak Mutation 231: ArrayExamples.goodResize([II)[I:49 - ReplaceVariable list -> result
   * Goal 28. Weak Mutation 232: ArrayExamples.goodResize([II)[I:49 - InsertUnaryOp Negation of newSize
   * Goal 29. Weak Mutation 233: ArrayExamples.goodResize([II)[I:49 - InsertUnaryOp IINC 1 newSize
   * Goal 30. Weak Mutation 234: ArrayExamples.goodResize([II)[I:49 - InsertUnaryOp IINC -1 newSize
   * Goal 31. Weak Mutation 235: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> 0
   * Goal 32. Weak Mutation 236: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> 1
   * Goal 33. Weak Mutation 237: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> -1
   * Goal 34. Weak Mutation 238: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> 2
   * Goal 35. Weak Mutation 239: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> 4
   * Goal 36. Weak Mutation 240: ArrayExamples.goodResize([II)[I:51 - ReplaceVariable i -> limit
   * Goal 37. Weak Mutation 241: ArrayExamples.goodResize([II)[I:51 - ReplaceVariable i -> newSize
   * Goal 38. Weak Mutation 242: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp Negation of i
   * Goal 39. Weak Mutation 243: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp IINC 1 i
   * Goal 40. Weak Mutation 244: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp IINC -1 i
   * Goal 41. Weak Mutation 245: ArrayExamples.goodResize([II)[I:51 - ReplaceVariable limit -> i
   * Goal 42. Weak Mutation 247: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp Negation of limit
   * Goal 43. Weak Mutation 248: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp IINC 1 limit
   * Goal 44. Weak Mutation 249: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp IINC -1 limit
   * Goal 45. Weak Mutation 252: ArrayExamples.goodResize([II)[I:51 - ReplaceComparisonOperator >= -> ==
   * Goal 46. Weak Mutation 267: ArrayExamples.goodResize([II)[I:55 - ReplaceVariable result -> list
   */

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayExamples.goodResize(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  //Test case number: 2
  /*
   * 7 covered goals:
   * Goal 1. showList([I)V_java.lang.NullPointerException_IMPLICIT
   * Goal 2. ArrayExamples.showList([I)V: Line 107
   * Goal 3. [METHOD] ArrayExamples.showList([I)V
   * Goal 4. Weak Mutation 472: ArrayExamples.showList([I)V:107 - ReplaceConstant - 0 -> 1
   * Goal 5. Weak Mutation 473: ArrayExamples.showList([I)V:107 - InsertUnaryOp Negation of i
   * Goal 6. Weak Mutation 474: ArrayExamples.showList([I)V:107 - InsertUnaryOp IINC 1 i
   * Goal 7. Weak Mutation 475: ArrayExamples.showList([I)V:107 - InsertUnaryOp IINC -1 i
   */

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayExamples.showList((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
        // assertThrownBy("ArrayExamples", e);
      }
  }

  //Test case number: 3
  /*
   * 16 covered goals:
   * Goal 1. ArrayExamples.isAscending([I)Z: I11 Branch 27 IFEQ L118 - false
   * Goal 2. Branch ArrayExamples.isAscending([I)Z: I11 Branch 27 IFEQ L118 - false in context: ArrayExamples:isAscending([I)Z
   * Goal 3. isAscending([I)Z_java.lang.NullPointerException_IMPLICIT
   * Goal 4. ArrayExamples.isAscending([I)Z: Line 116
   * Goal 5. ArrayExamples.isAscending([I)Z: Line 117
   * Goal 6. ArrayExamples.isAscending([I)Z: Line 118
   * Goal 7. [METHOD] ArrayExamples.isAscending([I)Z
   * Goal 8. Weak Mutation 483: ArrayExamples.isAscending([I)Z:116 - ReplaceConstant - 1 -> 0
   * Goal 9. Weak Mutation 484: ArrayExamples.isAscending([I)Z:117 - ReplaceConstant - 1 -> 0
   * Goal 10. Weak Mutation 485: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp Negation of ascending
   * Goal 11. Weak Mutation 486: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC 1 ascending
   * Goal 12. Weak Mutation 487: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC -1 ascending
   * Goal 13. Weak Mutation 488: ArrayExamples.isAscending([I)Z:118 - ReplaceComparisonOperator == -> !=
   * Goal 14. Weak Mutation 489: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp Negation of index
   * Goal 15. Weak Mutation 490: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC 1 index
   * Goal 16. Weak Mutation 491: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC -1 index
   */

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayExamples.isAscending((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("ArrayExamples", e);
      }
  }

  //Test case number: 4
  /*
   * 60 covered goals:
   * Goal 1. ArrayExamples.isAscending([I)Z: I11 Branch 27 IFEQ L118 - false
   * Goal 2. ArrayExamples.isAscending([I)Z: I15 Branch 28 IF_ICMPGE L118 - true
   * Goal 3. ArrayExamples.isAscending([I)Z: I15 Branch 28 IF_ICMPGE L118 - false
   * Goal 4. ArrayExamples.isAscending([I)Z: I19 Branch 29 IFNE L119 - false
   * Goal 5. ArrayExamples.isAscending([I)Z: I21 Branch 30 IFLT L119 - false
   * Goal 6. ArrayExamples.isAscending([I)Z: I25 Branch 31 IF_ICMPLT L119 - true
   * Goal 7. ArrayExamples.isAscending([I)Z: I41 Branch 32 IF_ICMPGT L121 - false
   * Goal 8. Branch ArrayExamples.isAscending([I)Z: I15 Branch 28 IF_ICMPGE L118 - true in context: ArrayExamples:isAscending([I)Z
   * Goal 9. Branch ArrayExamples.isAscending([I)Z: I11 Branch 27 IFEQ L118 - false in context: ArrayExamples:isAscending([I)Z
   * Goal 10. Branch ArrayExamples.isAscending([I)Z: I15 Branch 28 IF_ICMPGE L118 - false in context: ArrayExamples:isAscending([I)Z
   * Goal 11. Branch ArrayExamples.isAscending([I)Z: I25 Branch 31 IF_ICMPLT L119 - true in context: ArrayExamples:isAscending([I)Z
   * Goal 12. Branch ArrayExamples.isAscending([I)Z: I21 Branch 30 IFLT L119 - false in context: ArrayExamples:isAscending([I)Z
   * Goal 13. Branch ArrayExamples.isAscending([I)Z: I19 Branch 29 IFNE L119 - false in context: ArrayExamples:isAscending([I)Z
   * Goal 14. Branch ArrayExamples.isAscending([I)Z: I41 Branch 32 IF_ICMPGT L121 - false in context: ArrayExamples:isAscending([I)Z
   * Goal 15. [Output]: ArrayExamples.isAscending([I)Z:True
   * Goal 16. ArrayExamples.isAscending([I)Z: Line 116
   * Goal 17. ArrayExamples.isAscending([I)Z: Line 117
   * Goal 18. ArrayExamples.isAscending([I)Z: Line 118
   * Goal 19. ArrayExamples.isAscending([I)Z: Line 119
   * Goal 20. ArrayExamples.isAscending([I)Z: Line 121
   * Goal 21. ArrayExamples.isAscending([I)Z: Line 122
   * Goal 22. ArrayExamples.isAscending([I)Z: Line 125
   * Goal 23. [METHOD] ArrayExamples.isAscending([I)Z
   * Goal 24. [METHODNOEX] ArrayExamples.isAscending([I)Z
   * Goal 25. Weak Mutation 483: ArrayExamples.isAscending([I)Z:116 - ReplaceConstant - 1 -> 0
   * Goal 26. Weak Mutation 484: ArrayExamples.isAscending([I)Z:117 - ReplaceConstant - 1 -> 0
   * Goal 27. Weak Mutation 485: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp Negation of ascending
   * Goal 28. Weak Mutation 486: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC 1 ascending
   * Goal 29. Weak Mutation 487: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC -1 ascending
   * Goal 30. Weak Mutation 488: ArrayExamples.isAscending([I)Z:118 - ReplaceComparisonOperator == -> !=
   * Goal 31. Weak Mutation 489: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp Negation of index
   * Goal 32. Weak Mutation 490: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC 1 index
   * Goal 33. Weak Mutation 491: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC -1 index
   * Goal 34. Weak Mutation 492: ArrayExamples.isAscending([I)Z:118 - ReplaceComparisonOperator >= -> -1
   * Goal 35. Weak Mutation 493: ArrayExamples.isAscending([I)Z:118 - ReplaceComparisonOperator >= -> >
   * Goal 36. Weak Mutation 495: ArrayExamples.isAscending([I)Z:119 - InsertUnaryOp Negation
   * Goal 37. Weak Mutation 496: ArrayExamples.isAscending([I)Z:119 - ReplaceComparisonOperator != -> ==
   * Goal 38. Weak Mutation 497: ArrayExamples.isAscending([I)Z:119 - InsertUnaryOp Negation of index
   * Goal 39. Weak Mutation 498: ArrayExamples.isAscending([I)Z:119 - InsertUnaryOp IINC 1 index
   * Goal 40. Weak Mutation 499: ArrayExamples.isAscending([I)Z:119 - InsertUnaryOp IINC -1 index
   * Goal 41. Weak Mutation 501: ArrayExamples.isAscending([I)Z:119 - ReplaceComparisonOperator < -> !=
   * Goal 42. Weak Mutation 503: ArrayExamples.isAscending([I)Z:119 - InsertUnaryOp Negation of index
   * Goal 43. Weak Mutation 504: ArrayExamples.isAscending([I)Z:119 - InsertUnaryOp IINC 1 index
   * Goal 44. Weak Mutation 505: ArrayExamples.isAscending([I)Z:119 - InsertUnaryOp IINC -1 index
   * Goal 45. Weak Mutation 507: ArrayExamples.isAscending([I)Z:119 - ReplaceComparisonOperator < -> -2
   * Goal 46. Weak Mutation 509: ArrayExamples.isAscending([I)Z:121 - InsertUnaryOp Negation of index
   * Goal 47. Weak Mutation 510: ArrayExamples.isAscending([I)Z:121 - InsertUnaryOp IINC 1 index
   * Goal 48. Weak Mutation 511: ArrayExamples.isAscending([I)Z:121 - InsertUnaryOp IINC -1 index
   * Goal 49. Weak Mutation 512: ArrayExamples.isAscending([I)Z:121 - ReplaceConstant - 1 -> 0
   * Goal 50. Weak Mutation 513: ArrayExamples.isAscending([I)Z:121 - ReplaceArithmeticOperator - -> +
   * Goal 51. Weak Mutation 515: ArrayExamples.isAscending([I)Z:121 - ReplaceArithmeticOperator - -> *
   * Goal 52. Weak Mutation 516: ArrayExamples.isAscending([I)Z:121 - ReplaceArithmeticOperator - -> /
   * Goal 53. Weak Mutation 517: ArrayExamples.isAscending([I)Z:121 - InsertUnaryOp Negation of index
   * Goal 54. Weak Mutation 518: ArrayExamples.isAscending([I)Z:121 - InsertUnaryOp IINC 1 index
   * Goal 55. Weak Mutation 519: ArrayExamples.isAscending([I)Z:121 - InsertUnaryOp IINC -1 index
   * Goal 56. Weak Mutation 522: ArrayExamples.isAscending([I)Z:121 - ReplaceComparisonOperator > -> >=
   * Goal 57. Weak Mutation 523: ArrayExamples.isAscending([I)Z:121 - ReplaceConstant - 1 -> 0
   * Goal 58. Weak Mutation 525: ArrayExamples.isAscending([I)Z:125 - InsertUnaryOp Negation of ascending
   * Goal 59. Weak Mutation 526: ArrayExamples.isAscending([I)Z:125 - InsertUnaryOp IINC 1 ascending
   * Goal 60. Weak Mutation 527: ArrayExamples.isAscending([I)Z:125 - InsertUnaryOp IINC -1 ascending
   */

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayExamples.isAscending(intArray0);
      assertTrue(boolean0);
  }

  //Test case number: 5
  /*
   * 62 covered goals:
   * Goal 1. ArrayExamples.bubblesort([I)V: I3 Branch 15 IFNE L84 - false
   * Goal 2. ArrayExamples.bubblesort([I)V: I5 Branch 16 IFNONNULL L84 - true
   * Goal 3. ArrayExamples.bubblesort([I)V: I23 Branch 17 IF_ICMPGE L88 - false
   * Goal 4. ArrayExamples.bubblesort([I)V: I25 Branch 18 IFEQ L88 - false
   * Goal 5. ArrayExamples.bubblesort([I)V: I42 Branch 19 IF_ICMPGE L90 - false
   * Goal 6. ArrayExamples.bubblesort([I)V: I46 Branch 20 IFNE L91 - false
   * Goal 7. ArrayExamples.bubblesort([I)V: I48 Branch 21 IFLE L91 - true
   * Goal 8. Branch ArrayExamples.bubblesort([I)V: I5 Branch 16 IFNONNULL L84 - true in context: ArrayExamples:bubblesort([I)V
   * Goal 9. Branch ArrayExamples.bubblesort([I)V: I3 Branch 15 IFNE L84 - false in context: ArrayExamples:bubblesort([I)V
   * Goal 10. Branch ArrayExamples.bubblesort([I)V: I23 Branch 17 IF_ICMPGE L88 - false in context: ArrayExamples:bubblesort([I)V
   * Goal 11. Branch ArrayExamples.bubblesort([I)V: I25 Branch 18 IFEQ L88 - false in context: ArrayExamples:bubblesort([I)V
   * Goal 12. Branch ArrayExamples.bubblesort([I)V: I42 Branch 19 IF_ICMPGE L90 - false in context: ArrayExamples:bubblesort([I)V
   * Goal 13. Branch ArrayExamples.bubblesort([I)V: I46 Branch 20 IFNE L91 - false in context: ArrayExamples:bubblesort([I)V
   * Goal 14. Branch ArrayExamples.bubblesort([I)V: I48 Branch 21 IFLE L91 - true in context: ArrayExamples:bubblesort([I)V
   * Goal 15. bubblesort([I)V_java.lang.AssertionError_EXPLICIT
   * Goal 16. ArrayExamples.bubblesort([I)V: Line 84
   * Goal 17. ArrayExamples.bubblesort([I)V: Line 87
   * Goal 18. ArrayExamples.bubblesort([I)V: Line 88
   * Goal 19. ArrayExamples.bubblesort([I)V: Line 89
   * Goal 20. ArrayExamples.bubblesort([I)V: Line 90
   * Goal 21. ArrayExamples.bubblesort([I)V: Line 91
   * Goal 22. [METHOD] ArrayExamples.bubblesort([I)V
   * Goal 23. Weak Mutation 352: ArrayExamples.bubblesort([I)V:84 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 353: ArrayExamples.bubblesort([I)V:84 - ReplaceComparisonOperator != -> ==
   * Goal 25. Weak Mutation 354: ArrayExamples.bubblesort([I)V:84 - ReplaceComparisonOperator != null -> = null
   * Goal 26. Weak Mutation 356: ArrayExamples.bubblesort([I)V:87 - ReplaceConstant - 1 -> 0
   * Goal 27. Weak Mutation 357: ArrayExamples.bubblesort([I)V:88 - ReplaceConstant - 0 -> 1
   * Goal 28. Weak Mutation 358: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp Negation of i
   * Goal 29. Weak Mutation 359: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp IINC 1 i
   * Goal 30. Weak Mutation 360: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp IINC -1 i
   * Goal 31. Weak Mutation 361: ArrayExamples.bubblesort([I)V:88 - ReplaceComparisonOperator >= -> -1
   * Goal 32. Weak Mutation 364: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp Negation of changed
   * Goal 33. Weak Mutation 365: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp IINC 1 changed
   * Goal 34. Weak Mutation 366: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp IINC -1 changed
   * Goal 35. Weak Mutation 367: ArrayExamples.bubblesort([I)V:88 - ReplaceComparisonOperator == -> !=
   * Goal 36. Weak Mutation 368: ArrayExamples.bubblesort([I)V:89 - ReplaceConstant - 0 -> 1
   * Goal 37. Weak Mutation 369: ArrayExamples.bubblesort([I)V:90 - ReplaceConstant - 0 -> 1
   * Goal 38. Weak Mutation 371: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp Negation of j
   * Goal 39. Weak Mutation 372: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp IINC 1 j
   * Goal 40. Weak Mutation 373: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp IINC -1 j
   * Goal 41. Weak Mutation 375: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp Negation of i
   * Goal 42. Weak Mutation 376: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp IINC 1 i
   * Goal 43. Weak Mutation 377: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp IINC -1 i
   * Goal 44. Weak Mutation 379: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> %
   * Goal 45. Weak Mutation 381: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> /
   * Goal 46. Weak Mutation 382: ArrayExamples.bubblesort([I)V:90 - ReplaceConstant - 1 -> 0
   * Goal 47. Weak Mutation 383: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> +
   * Goal 48. Weak Mutation 384: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> %
   * Goal 49. Weak Mutation 385: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> *
   * Goal 50. Weak Mutation 386: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> /
   * Goal 51. Weak Mutation 387: ArrayExamples.bubblesort([I)V:90 - ReplaceComparisonOperator >= -> -1
   * Goal 52. Weak Mutation 390: ArrayExamples.bubblesort([I)V:91 - InsertUnaryOp Negation
   * Goal 53. Weak Mutation 391: ArrayExamples.bubblesort([I)V:91 - ReplaceComparisonOperator != -> ==
   * Goal 54. Weak Mutation 393: ArrayExamples.bubblesort([I)V:91 - InsertUnaryOp Negation of j
   * Goal 55. Weak Mutation 394: ArrayExamples.bubblesort([I)V:91 - InsertUnaryOp IINC 1 j
   * Goal 56. Weak Mutation 395: ArrayExamples.bubblesort([I)V:91 - InsertUnaryOp IINC -1 j
   * Goal 57. Weak Mutation 398: ArrayExamples.bubblesort([I)V:91 - ReplaceComparisonOperator <= -> <
   * Goal 58. Weak Mutation 411: ArrayExamples.bubblesort([I)V:91 - ReplaceConstant - loop counter j  -> 
   * Goal 59. Weak Mutation 413: ArrayExamples.bubblesort([I)V:91 - InsertUnaryOp Negation of j
   * Goal 60. Weak Mutation 414: ArrayExamples.bubblesort([I)V:91 - InsertUnaryOp IINC 1 j
   * Goal 61. Weak Mutation 415: ArrayExamples.bubblesort([I)V:91 - InsertUnaryOp IINC -1 j
   * Goal 62. Weak Mutation 416: ArrayExamples.bubblesort([I)V:91 - ReplaceConstant - is out of bounds. -> 
   */

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        ArrayExamples.bubblesort(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // loop counter j 0is out of bounds.
         //
      }
  }

  //Test case number: 6
  /*
   * 101 covered goals:
   * Goal 1. ArrayExamples.findAndPrintPairs([II)V: I3 Branch 10 IFNE L65 - false
   * Goal 2. ArrayExamples.findAndPrintPairs([II)V: I5 Branch 11 IFNONNULL L65 - true
   * Goal 3. ArrayExamples.findAndPrintPairs([II)V: I19 Branch 12 IF_ICMPGE L67 - true
   * Goal 4. ArrayExamples.findAndPrintPairs([II)V: I19 Branch 12 IF_ICMPGE L67 - false
   * Goal 5. ArrayExamples.findAndPrintPairs([II)V: I30 Branch 13 IF_ICMPGE L68 - true
   * Goal 6. ArrayExamples.findAndPrintPairs([II)V: I30 Branch 13 IF_ICMPGE L68 - false
   * Goal 7. ArrayExamples.findAndPrintPairs([II)V: I41 Branch 14 IF_ICMPNE L69 - false
   * Goal 8. Branch ArrayExamples.findAndPrintPairs([II)V: I5 Branch 11 IFNONNULL L65 - true in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 9. Branch ArrayExamples.findAndPrintPairs([II)V: I3 Branch 10 IFNE L65 - false in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 10. Branch ArrayExamples.findAndPrintPairs([II)V: I19 Branch 12 IF_ICMPGE L67 - false in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 11. Branch ArrayExamples.findAndPrintPairs([II)V: I19 Branch 12 IF_ICMPGE L67 - true in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 12. Branch ArrayExamples.findAndPrintPairs([II)V: I30 Branch 13 IF_ICMPGE L68 - false in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 13. Branch ArrayExamples.findAndPrintPairs([II)V: I30 Branch 13 IF_ICMPGE L68 - true in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 14. Branch ArrayExamples.findAndPrintPairs([II)V: I41 Branch 14 IF_ICMPNE L69 - false in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 15. ArrayExamples.findAndPrintPairs([II)V: Line 65
   * Goal 16. ArrayExamples.findAndPrintPairs([II)V: Line 67
   * Goal 17. ArrayExamples.findAndPrintPairs([II)V: Line 68
   * Goal 18. ArrayExamples.findAndPrintPairs([II)V: Line 69
   * Goal 19. ArrayExamples.findAndPrintPairs([II)V: Line 70
   * Goal 20. ArrayExamples.findAndPrintPairs([II)V: Line 75
   * Goal 21. [METHOD] ArrayExamples.findAndPrintPairs([II)V
   * Goal 22. [METHODNOEX] ArrayExamples.findAndPrintPairs([II)V
   * Goal 23. Weak Mutation 268: ArrayExamples.findAndPrintPairs([II)V:65 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 269: ArrayExamples.findAndPrintPairs([II)V:65 - ReplaceComparisonOperator != -> ==
   * Goal 25. Weak Mutation 270: ArrayExamples.findAndPrintPairs([II)V:65 - ReplaceComparisonOperator != null -> = null
   * Goal 26. Weak Mutation 272: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceConstant - 0 -> 1
   * Goal 27. Weak Mutation 273: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceVariable i -> target
   * Goal 28. Weak Mutation 274: ArrayExamples.findAndPrintPairs([II)V:67 - InsertUnaryOp Negation of i
   * Goal 29. Weak Mutation 275: ArrayExamples.findAndPrintPairs([II)V:67 - InsertUnaryOp IINC 1 i
   * Goal 30. Weak Mutation 276: ArrayExamples.findAndPrintPairs([II)V:67 - InsertUnaryOp IINC -1 i
   * Goal 31. Weak Mutation 277: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceComparisonOperator >= -> -1
   * Goal 32. Weak Mutation 278: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceComparisonOperator >= -> >
   * Goal 33. Weak Mutation 351: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceVariable i -> target
   * Goal 34. Weak Mutation 280: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable i -> target
   * Goal 35. Weak Mutation 281: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp Negation of i
   * Goal 36. Weak Mutation 282: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC 1 i
   * Goal 37. Weak Mutation 283: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC -1 i
   * Goal 38. Weak Mutation 284: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceConstant - 1 -> 0
   * Goal 39. Weak Mutation 285: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> %
   * Goal 40. Weak Mutation 286: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> -
   * Goal 41. Weak Mutation 287: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> *
   * Goal 42. Weak Mutation 288: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> /
   * Goal 43. Weak Mutation 289: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> i
   * Goal 44. Weak Mutation 290: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> target
   * Goal 45. Weak Mutation 291: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp Negation of j
   * Goal 46. Weak Mutation 292: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC 1 j
   * Goal 47. Weak Mutation 293: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC -1 j
   * Goal 48. Weak Mutation 294: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceComparisonOperator >= -> -1
   * Goal 49. Weak Mutation 295: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceComparisonOperator >= -> >
   * Goal 50. Weak Mutation 349: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> i
   * Goal 51. Weak Mutation 350: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> target
   * Goal 52. Weak Mutation 297: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable i -> j
   * Goal 53. Weak Mutation 298: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable i -> target
   * Goal 54. Weak Mutation 299: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp Negation of i
   * Goal 55. Weak Mutation 300: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC 1 i
   * Goal 56. Weak Mutation 301: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC -1 i
   * Goal 57. Weak Mutation 302: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable j -> i
   * Goal 58. Weak Mutation 303: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable j -> target
   * Goal 59. Weak Mutation 304: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp Negation of j
   * Goal 60. Weak Mutation 305: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC 1 j
   * Goal 61. Weak Mutation 306: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC -1 j
   * Goal 62. Weak Mutation 307: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceArithmeticOperator + -> %
   * Goal 63. Weak Mutation 308: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceArithmeticOperator + -> -
   * Goal 64. Weak Mutation 309: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceArithmeticOperator + -> *
   * Goal 65. Weak Mutation 310: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceArithmeticOperator + -> /
   * Goal 66. Weak Mutation 311: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable target -> i
   * Goal 67. Weak Mutation 312: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable target -> j
   * Goal 68. Weak Mutation 313: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp Negation of target
   * Goal 69. Weak Mutation 314: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC 1 target
   * Goal 70. Weak Mutation 315: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC -1 target
   * Goal 71. Weak Mutation 316: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceComparisonOperator != -> -1
   * Goal 72. Weak Mutation 319: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceConstant - The two elements at indices  -> 
   * Goal 73. Weak Mutation 320: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable i -> j
   * Goal 74. Weak Mutation 321: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable i -> target
   * Goal 75. Weak Mutation 322: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp Negation of i
   * Goal 76. Weak Mutation 323: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC 1 i
   * Goal 77. Weak Mutation 324: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC -1 i
   * Goal 78. Weak Mutation 325: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceConstant -  and  -> 
   * Goal 79. Weak Mutation 326: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable j -> i
   * Goal 80. Weak Mutation 327: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable j -> target
   * Goal 81. Weak Mutation 328: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp Negation of j
   * Goal 82. Weak Mutation 329: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC 1 j
   * Goal 83. Weak Mutation 330: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC -1 j
   * Goal 84. Weak Mutation 331: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceConstant -  are  -> 
   * Goal 85. Weak Mutation 332: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable i -> j
   * Goal 86. Weak Mutation 333: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable i -> target
   * Goal 87. Weak Mutation 334: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp Negation of i
   * Goal 88. Weak Mutation 335: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC 1 i
   * Goal 89. Weak Mutation 336: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC -1 i
   * Goal 90. Weak Mutation 337: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceConstant -  and  -> 
   * Goal 91. Weak Mutation 338: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable j -> i
   * Goal 92. Weak Mutation 339: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable j -> target
   * Goal 93. Weak Mutation 340: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp Negation of j
   * Goal 94. Weak Mutation 341: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC 1 j
   * Goal 95. Weak Mutation 342: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC -1 j
   * Goal 96. Weak Mutation 343: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceConstant -  add up to  -> 
   * Goal 97. Weak Mutation 344: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable target -> i
   * Goal 98. Weak Mutation 345: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable target -> j
   * Goal 99. Weak Mutation 346: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp Negation of target
   * Goal 100. Weak Mutation 347: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC 1 target
   * Goal 101. Weak Mutation 348: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC -1 target
   */

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1432;
      ArrayExamples.findAndPrintPairs(intArray0, 1432);
      assertArrayEquals(new int[] {0, 1432}, intArray0);
  }

  //Test case number: 7
  /*
   * 68 covered goals:
   * Goal 1. ArrayExamples.findAndPrintPairs([II)V: I3 Branch 10 IFNE L65 - false
   * Goal 2. ArrayExamples.findAndPrintPairs([II)V: I5 Branch 11 IFNONNULL L65 - true
   * Goal 3. ArrayExamples.findAndPrintPairs([II)V: I19 Branch 12 IF_ICMPGE L67 - true
   * Goal 4. ArrayExamples.findAndPrintPairs([II)V: I19 Branch 12 IF_ICMPGE L67 - false
   * Goal 5. ArrayExamples.findAndPrintPairs([II)V: I30 Branch 13 IF_ICMPGE L68 - true
   * Goal 6. ArrayExamples.findAndPrintPairs([II)V: I30 Branch 13 IF_ICMPGE L68 - false
   * Goal 7. ArrayExamples.findAndPrintPairs([II)V: I41 Branch 14 IF_ICMPNE L69 - true
   * Goal 8. Branch ArrayExamples.findAndPrintPairs([II)V: I5 Branch 11 IFNONNULL L65 - true in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 9. Branch ArrayExamples.findAndPrintPairs([II)V: I3 Branch 10 IFNE L65 - false in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 10. Branch ArrayExamples.findAndPrintPairs([II)V: I19 Branch 12 IF_ICMPGE L67 - false in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 11. Branch ArrayExamples.findAndPrintPairs([II)V: I19 Branch 12 IF_ICMPGE L67 - true in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 12. Branch ArrayExamples.findAndPrintPairs([II)V: I30 Branch 13 IF_ICMPGE L68 - false in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 13. Branch ArrayExamples.findAndPrintPairs([II)V: I30 Branch 13 IF_ICMPGE L68 - true in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 14. Branch ArrayExamples.findAndPrintPairs([II)V: I41 Branch 14 IF_ICMPNE L69 - true in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 15. ArrayExamples.findAndPrintPairs([II)V: Line 65
   * Goal 16. ArrayExamples.findAndPrintPairs([II)V: Line 67
   * Goal 17. ArrayExamples.findAndPrintPairs([II)V: Line 68
   * Goal 18. ArrayExamples.findAndPrintPairs([II)V: Line 69
   * Goal 19. ArrayExamples.findAndPrintPairs([II)V: Line 75
   * Goal 20. [METHOD] ArrayExamples.findAndPrintPairs([II)V
   * Goal 21. [METHODNOEX] ArrayExamples.findAndPrintPairs([II)V
   * Goal 22. Weak Mutation 268: ArrayExamples.findAndPrintPairs([II)V:65 - InsertUnaryOp Negation
   * Goal 23. Weak Mutation 269: ArrayExamples.findAndPrintPairs([II)V:65 - ReplaceComparisonOperator != -> ==
   * Goal 24. Weak Mutation 270: ArrayExamples.findAndPrintPairs([II)V:65 - ReplaceComparisonOperator != null -> = null
   * Goal 25. Weak Mutation 272: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceConstant - 0 -> 1
   * Goal 26. Weak Mutation 273: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceVariable i -> target
   * Goal 27. Weak Mutation 274: ArrayExamples.findAndPrintPairs([II)V:67 - InsertUnaryOp Negation of i
   * Goal 28. Weak Mutation 275: ArrayExamples.findAndPrintPairs([II)V:67 - InsertUnaryOp IINC 1 i
   * Goal 29. Weak Mutation 276: ArrayExamples.findAndPrintPairs([II)V:67 - InsertUnaryOp IINC -1 i
   * Goal 30. Weak Mutation 277: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceComparisonOperator >= -> -1
   * Goal 31. Weak Mutation 278: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceComparisonOperator >= -> >
   * Goal 32. Weak Mutation 351: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceVariable i -> target
   * Goal 33. Weak Mutation 280: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable i -> target
   * Goal 34. Weak Mutation 281: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp Negation of i
   * Goal 35. Weak Mutation 282: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC 1 i
   * Goal 36. Weak Mutation 283: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC -1 i
   * Goal 37. Weak Mutation 284: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceConstant - 1 -> 0
   * Goal 38. Weak Mutation 285: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> %
   * Goal 39. Weak Mutation 286: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> -
   * Goal 40. Weak Mutation 287: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> *
   * Goal 41. Weak Mutation 288: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> /
   * Goal 42. Weak Mutation 289: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> i
   * Goal 43. Weak Mutation 290: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> target
   * Goal 44. Weak Mutation 291: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp Negation of j
   * Goal 45. Weak Mutation 292: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC 1 j
   * Goal 46. Weak Mutation 293: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC -1 j
   * Goal 47. Weak Mutation 294: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceComparisonOperator >= -> -1
   * Goal 48. Weak Mutation 295: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceComparisonOperator >= -> >
   * Goal 49. Weak Mutation 349: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> i
   * Goal 50. Weak Mutation 350: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> target
   * Goal 51. Weak Mutation 297: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable i -> j
   * Goal 52. Weak Mutation 298: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable i -> target
   * Goal 53. Weak Mutation 299: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp Negation of i
   * Goal 54. Weak Mutation 300: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC 1 i
   * Goal 55. Weak Mutation 301: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC -1 i
   * Goal 56. Weak Mutation 302: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable j -> i
   * Goal 57. Weak Mutation 303: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable j -> target
   * Goal 58. Weak Mutation 304: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp Negation of j
   * Goal 59. Weak Mutation 305: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC 1 j
   * Goal 60. Weak Mutation 306: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC -1 j
   * Goal 61. Weak Mutation 307: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceArithmeticOperator + -> %
   * Goal 62. Weak Mutation 310: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceArithmeticOperator + -> /
   * Goal 63. Weak Mutation 311: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable target -> i
   * Goal 64. Weak Mutation 312: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable target -> j
   * Goal 65. Weak Mutation 313: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp Negation of target
   * Goal 66. Weak Mutation 314: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC 1 target
   * Goal 67. Weak Mutation 315: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC -1 target
   * Goal 68. Weak Mutation 318: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceComparisonOperator != -> >
   */

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayExamples.findAndPrintPairs(intArray0, 1432);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  //Test case number: 8
  /*
   * 64 covered goals:
   * Goal 1. ArrayExamples.isAscending([I)Z: I11 Branch 27 IFEQ L118 - true
   * Goal 2. ArrayExamples.isAscending([I)Z: I11 Branch 27 IFEQ L118 - false
   * Goal 3. ArrayExamples.isAscending([I)Z: I15 Branch 28 IF_ICMPGE L118 - false
   * Goal 4. ArrayExamples.isAscending([I)Z: I19 Branch 29 IFNE L119 - false
   * Goal 5. ArrayExamples.isAscending([I)Z: I21 Branch 30 IFLT L119 - false
   * Goal 6. ArrayExamples.isAscending([I)Z: I25 Branch 31 IF_ICMPLT L119 - true
   * Goal 7. ArrayExamples.isAscending([I)Z: I41 Branch 32 IF_ICMPGT L121 - true
   * Goal 8. ArrayExamples.isAscending([I)Z: I41 Branch 32 IF_ICMPGT L121 - false
   * Goal 9. Branch ArrayExamples.isAscending([I)Z: I11 Branch 27 IFEQ L118 - true in context: ArrayExamples:isAscending([I)Z
   * Goal 10. Branch ArrayExamples.isAscending([I)Z: I11 Branch 27 IFEQ L118 - false in context: ArrayExamples:isAscending([I)Z
   * Goal 11. Branch ArrayExamples.isAscending([I)Z: I15 Branch 28 IF_ICMPGE L118 - false in context: ArrayExamples:isAscending([I)Z
   * Goal 12. Branch ArrayExamples.isAscending([I)Z: I25 Branch 31 IF_ICMPLT L119 - true in context: ArrayExamples:isAscending([I)Z
   * Goal 13. Branch ArrayExamples.isAscending([I)Z: I21 Branch 30 IFLT L119 - false in context: ArrayExamples:isAscending([I)Z
   * Goal 14. Branch ArrayExamples.isAscending([I)Z: I19 Branch 29 IFNE L119 - false in context: ArrayExamples:isAscending([I)Z
   * Goal 15. Branch ArrayExamples.isAscending([I)Z: I41 Branch 32 IF_ICMPGT L121 - false in context: ArrayExamples:isAscending([I)Z
   * Goal 16. Branch ArrayExamples.isAscending([I)Z: I41 Branch 32 IF_ICMPGT L121 - true in context: ArrayExamples:isAscending([I)Z
   * Goal 17. [Output]: ArrayExamples.isAscending([I)Z:False
   * Goal 18. ArrayExamples.isAscending([I)Z: Line 116
   * Goal 19. ArrayExamples.isAscending([I)Z: Line 117
   * Goal 20. ArrayExamples.isAscending([I)Z: Line 118
   * Goal 21. ArrayExamples.isAscending([I)Z: Line 119
   * Goal 22. ArrayExamples.isAscending([I)Z: Line 121
   * Goal 23. ArrayExamples.isAscending([I)Z: Line 122
   * Goal 24. ArrayExamples.isAscending([I)Z: Line 125
   * Goal 25. [METHOD] ArrayExamples.isAscending([I)Z
   * Goal 26. [METHODNOEX] ArrayExamples.isAscending([I)Z
   * Goal 27. Weak Mutation 483: ArrayExamples.isAscending([I)Z:116 - ReplaceConstant - 1 -> 0
   * Goal 28. Weak Mutation 484: ArrayExamples.isAscending([I)Z:117 - ReplaceConstant - 1 -> 0
   * Goal 29. Weak Mutation 485: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp Negation of ascending
   * Goal 30. Weak Mutation 486: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC 1 ascending
   * Goal 31. Weak Mutation 487: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC -1 ascending
   * Goal 32. Weak Mutation 488: ArrayExamples.isAscending([I)Z:118 - ReplaceComparisonOperator == -> !=
   * Goal 33. Weak Mutation 489: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp Negation of index
   * Goal 34. Weak Mutation 490: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC 1 index
   * Goal 35. Weak Mutation 491: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC -1 index
   * Goal 36. Weak Mutation 492: ArrayExamples.isAscending([I)Z:118 - ReplaceComparisonOperator >= -> -1
   * Goal 37. Weak Mutation 495: ArrayExamples.isAscending([I)Z:119 - InsertUnaryOp Negation
   * Goal 38. Weak Mutation 496: ArrayExamples.isAscending([I)Z:119 - ReplaceComparisonOperator != -> ==
   * Goal 39. Weak Mutation 497: ArrayExamples.isAscending([I)Z:119 - InsertUnaryOp Negation of index
   * Goal 40. Weak Mutation 498: ArrayExamples.isAscending([I)Z:119 - InsertUnaryOp IINC 1 index
   * Goal 41. Weak Mutation 499: ArrayExamples.isAscending([I)Z:119 - InsertUnaryOp IINC -1 index
   * Goal 42. Weak Mutation 501: ArrayExamples.isAscending([I)Z:119 - ReplaceComparisonOperator < -> !=
   * Goal 43. Weak Mutation 503: ArrayExamples.isAscending([I)Z:119 - InsertUnaryOp Negation of index
   * Goal 44. Weak Mutation 504: ArrayExamples.isAscending([I)Z:119 - InsertUnaryOp IINC 1 index
   * Goal 45. Weak Mutation 505: ArrayExamples.isAscending([I)Z:119 - InsertUnaryOp IINC -1 index
   * Goal 46. Weak Mutation 507: ArrayExamples.isAscending([I)Z:119 - ReplaceComparisonOperator < -> -2
   * Goal 47. Weak Mutation 509: ArrayExamples.isAscending([I)Z:121 - InsertUnaryOp Negation of index
   * Goal 48. Weak Mutation 510: ArrayExamples.isAscending([I)Z:121 - InsertUnaryOp IINC 1 index
   * Goal 49. Weak Mutation 511: ArrayExamples.isAscending([I)Z:121 - InsertUnaryOp IINC -1 index
   * Goal 50. Weak Mutation 512: ArrayExamples.isAscending([I)Z:121 - ReplaceConstant - 1 -> 0
   * Goal 51. Weak Mutation 513: ArrayExamples.isAscending([I)Z:121 - ReplaceArithmeticOperator - -> +
   * Goal 52. Weak Mutation 514: ArrayExamples.isAscending([I)Z:121 - ReplaceArithmeticOperator - -> %
   * Goal 53. Weak Mutation 515: ArrayExamples.isAscending([I)Z:121 - ReplaceArithmeticOperator - -> *
   * Goal 54. Weak Mutation 516: ArrayExamples.isAscending([I)Z:121 - ReplaceArithmeticOperator - -> /
   * Goal 55. Weak Mutation 517: ArrayExamples.isAscending([I)Z:121 - InsertUnaryOp Negation of index
   * Goal 56. Weak Mutation 518: ArrayExamples.isAscending([I)Z:121 - InsertUnaryOp IINC 1 index
   * Goal 57. Weak Mutation 519: ArrayExamples.isAscending([I)Z:121 - InsertUnaryOp IINC -1 index
   * Goal 58. Weak Mutation 520: ArrayExamples.isAscending([I)Z:121 - ReplaceComparisonOperator > -> !=
   * Goal 59. Weak Mutation 521: ArrayExamples.isAscending([I)Z:121 - ReplaceComparisonOperator > -> -2
   * Goal 60. Weak Mutation 523: ArrayExamples.isAscending([I)Z:121 - ReplaceConstant - 1 -> 0
   * Goal 61. Weak Mutation 524: ArrayExamples.isAscending([I)Z:121 - ReplaceConstant - 0 -> 1
   * Goal 62. Weak Mutation 525: ArrayExamples.isAscending([I)Z:125 - InsertUnaryOp Negation of ascending
   * Goal 63. Weak Mutation 526: ArrayExamples.isAscending([I)Z:125 - InsertUnaryOp IINC 1 ascending
   * Goal 64. Weak Mutation 527: ArrayExamples.isAscending([I)Z:125 - InsertUnaryOp IINC -1 ascending
   */

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 382;
      boolean boolean0 = ArrayExamples.isAscending(intArray0);
      assertFalse(boolean0);
  }

  //Test case number: 9
  /*
   * 20 covered goals:
   * Goal 1. ArrayExamples.showList([I)V: I8 Branch 26 IF_ICMPGE L107 - true
   * Goal 2. ArrayExamples.showList([I)V: I8 Branch 26 IF_ICMPGE L107 - false
   * Goal 3. Branch ArrayExamples.showList([I)V: I8 Branch 26 IF_ICMPGE L107 - false in context: ArrayExamples:showList([I)V
   * Goal 4. Branch ArrayExamples.showList([I)V: I8 Branch 26 IF_ICMPGE L107 - true in context: ArrayExamples:showList([I)V
   * Goal 5. ArrayExamples.showList([I)V: Line 107
   * Goal 6. ArrayExamples.showList([I)V: Line 108
   * Goal 7. ArrayExamples.showList([I)V: Line 109
   * Goal 8. ArrayExamples.showList([I)V: Line 110
   * Goal 9. [METHOD] ArrayExamples.showList([I)V
   * Goal 10. [METHODNOEX] ArrayExamples.showList([I)V
   * Goal 11. Weak Mutation 472: ArrayExamples.showList([I)V:107 - ReplaceConstant - 0 -> 1
   * Goal 12. Weak Mutation 473: ArrayExamples.showList([I)V:107 - InsertUnaryOp Negation of i
   * Goal 13. Weak Mutation 474: ArrayExamples.showList([I)V:107 - InsertUnaryOp IINC 1 i
   * Goal 14. Weak Mutation 475: ArrayExamples.showList([I)V:107 - InsertUnaryOp IINC -1 i
   * Goal 15. Weak Mutation 476: ArrayExamples.showList([I)V:107 - ReplaceComparisonOperator >= -> -1
   * Goal 16. Weak Mutation 477: ArrayExamples.showList([I)V:107 - ReplaceComparisonOperator >= -> >
   * Goal 17. Weak Mutation 479: ArrayExamples.showList([I)V:108 - InsertUnaryOp Negation of i
   * Goal 18. Weak Mutation 480: ArrayExamples.showList([I)V:108 - InsertUnaryOp IINC 1 i
   * Goal 19. Weak Mutation 481: ArrayExamples.showList([I)V:108 - InsertUnaryOp IINC -1 i
   * Goal 20. Weak Mutation 482: ArrayExamples.showList([I)V:108 - ReplaceConstant -   -> 
   */

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayExamples.showList(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  //Test case number: 10
  /*
   * 73 covered goals:
   * Goal 1. ArrayExamples.bubblesort([I)V: I3 Branch 15 IFNE L84 - false
   * Goal 2. ArrayExamples.bubblesort([I)V: I5 Branch 16 IFNONNULL L84 - true
   * Goal 3. ArrayExamples.bubblesort([I)V: I23 Branch 17 IF_ICMPGE L88 - true
   * Goal 4. ArrayExamples.bubblesort([I)V: I23 Branch 17 IF_ICMPGE L88 - false
   * Goal 5. ArrayExamples.bubblesort([I)V: I25 Branch 18 IFEQ L88 - false
   * Goal 6. ArrayExamples.bubblesort([I)V: I42 Branch 19 IF_ICMPGE L90 - true
   * Goal 7. ArrayExamples.bubblesort([I)V: I120 Branch 24 IFNE L102 - false
   * Goal 8. ArrayExamples.bubblesort([I)V: I123 Branch 25 IFNE L102 - true
   * Goal 9. ArrayExamples.isAscending([I)Z: I11 Branch 27 IFEQ L118 - false
   * Goal 10. ArrayExamples.isAscending([I)Z: I15 Branch 28 IF_ICMPGE L118 - true
   * Goal 11. Branch ArrayExamples.bubblesort([I)V: I5 Branch 16 IFNONNULL L84 - true in context: ArrayExamples:bubblesort([I)V
   * Goal 12. Branch ArrayExamples.bubblesort([I)V: I3 Branch 15 IFNE L84 - false in context: ArrayExamples:bubblesort([I)V
   * Goal 13. Branch ArrayExamples.bubblesort([I)V: I23 Branch 17 IF_ICMPGE L88 - false in context: ArrayExamples:bubblesort([I)V
   * Goal 14. Branch ArrayExamples.bubblesort([I)V: I25 Branch 18 IFEQ L88 - false in context: ArrayExamples:bubblesort([I)V
   * Goal 15. Branch ArrayExamples.bubblesort([I)V: I23 Branch 17 IF_ICMPGE L88 - true in context: ArrayExamples:bubblesort([I)V
   * Goal 16. Branch ArrayExamples.bubblesort([I)V: I42 Branch 19 IF_ICMPGE L90 - true in context: ArrayExamples:bubblesort([I)V
   * Goal 17. Branch ArrayExamples.bubblesort([I)V: I120 Branch 24 IFNE L102 - false in context: ArrayExamples:bubblesort([I)V
   * Goal 18. Branch ArrayExamples.bubblesort([I)V: I123 Branch 25 IFNE L102 - true in context: ArrayExamples:bubblesort([I)V
   * Goal 19. ArrayExamples.bubblesort([I)V: Line 84
   * Goal 20. ArrayExamples.bubblesort([I)V: Line 87
   * Goal 21. ArrayExamples.bubblesort([I)V: Line 88
   * Goal 22. ArrayExamples.bubblesort([I)V: Line 89
   * Goal 23. ArrayExamples.bubblesort([I)V: Line 90
   * Goal 24. ArrayExamples.bubblesort([I)V: Line 102
   * Goal 25. ArrayExamples.bubblesort([I)V: Line 103
   * Goal 26. ArrayExamples.isAscending([I)Z: Line 116
   * Goal 27. ArrayExamples.isAscending([I)Z: Line 117
   * Goal 28. ArrayExamples.isAscending([I)Z: Line 118
   * Goal 29. ArrayExamples.isAscending([I)Z: Line 125
   * Goal 30. [METHOD] ArrayExamples.bubblesort([I)V
   * Goal 31. [METHODNOEX] ArrayExamples.bubblesort([I)V
   * Goal 32. Weak Mutation 352: ArrayExamples.bubblesort([I)V:84 - InsertUnaryOp Negation
   * Goal 33. Weak Mutation 353: ArrayExamples.bubblesort([I)V:84 - ReplaceComparisonOperator != -> ==
   * Goal 34. Weak Mutation 354: ArrayExamples.bubblesort([I)V:84 - ReplaceComparisonOperator != null -> = null
   * Goal 35. Weak Mutation 356: ArrayExamples.bubblesort([I)V:87 - ReplaceConstant - 1 -> 0
   * Goal 36. Weak Mutation 357: ArrayExamples.bubblesort([I)V:88 - ReplaceConstant - 0 -> 1
   * Goal 37. Weak Mutation 358: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp Negation of i
   * Goal 38. Weak Mutation 359: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp IINC 1 i
   * Goal 39. Weak Mutation 360: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp IINC -1 i
   * Goal 40. Weak Mutation 361: ArrayExamples.bubblesort([I)V:88 - ReplaceComparisonOperator >= -> -1
   * Goal 41. Weak Mutation 362: ArrayExamples.bubblesort([I)V:88 - ReplaceComparisonOperator >= -> >
   * Goal 42. Weak Mutation 364: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp Negation of changed
   * Goal 43. Weak Mutation 365: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp IINC 1 changed
   * Goal 44. Weak Mutation 366: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp IINC -1 changed
   * Goal 45. Weak Mutation 367: ArrayExamples.bubblesort([I)V:88 - ReplaceComparisonOperator == -> !=
   * Goal 46. Weak Mutation 368: ArrayExamples.bubblesort([I)V:89 - ReplaceConstant - 0 -> 1
   * Goal 47. Weak Mutation 369: ArrayExamples.bubblesort([I)V:90 - ReplaceConstant - 0 -> 1
   * Goal 48. Weak Mutation 371: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp Negation of j
   * Goal 49. Weak Mutation 372: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp IINC 1 j
   * Goal 50. Weak Mutation 373: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp IINC -1 j
   * Goal 51. Weak Mutation 375: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp Negation of i
   * Goal 52. Weak Mutation 376: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp IINC 1 i
   * Goal 53. Weak Mutation 377: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp IINC -1 i
   * Goal 54. Weak Mutation 379: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> %
   * Goal 55. Weak Mutation 381: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> /
   * Goal 56. Weak Mutation 382: ArrayExamples.bubblesort([I)V:90 - ReplaceConstant - 1 -> 0
   * Goal 57. Weak Mutation 383: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> +
   * Goal 58. Weak Mutation 385: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> *
   * Goal 59. Weak Mutation 386: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> /
   * Goal 60. Weak Mutation 388: ArrayExamples.bubblesort([I)V:90 - ReplaceComparisonOperator >= -> >
   * Goal 61. Weak Mutation 483: ArrayExamples.isAscending([I)Z:116 - ReplaceConstant - 1 -> 0
   * Goal 62. Weak Mutation 484: ArrayExamples.isAscending([I)Z:117 - ReplaceConstant - 1 -> 0
   * Goal 63. Weak Mutation 485: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp Negation of ascending
   * Goal 64. Weak Mutation 486: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC 1 ascending
   * Goal 65. Weak Mutation 487: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC -1 ascending
   * Goal 66. Weak Mutation 488: ArrayExamples.isAscending([I)Z:118 - ReplaceComparisonOperator == -> !=
   * Goal 67. Weak Mutation 489: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp Negation of index
   * Goal 68. Weak Mutation 490: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC 1 index
   * Goal 69. Weak Mutation 491: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC -1 index
   * Goal 70. Weak Mutation 493: ArrayExamples.isAscending([I)Z:118 - ReplaceComparisonOperator >= -> >
   * Goal 71. Weak Mutation 525: ArrayExamples.isAscending([I)Z:125 - InsertUnaryOp Negation of ascending
   * Goal 72. Weak Mutation 526: ArrayExamples.isAscending([I)Z:125 - InsertUnaryOp IINC 1 ascending
   * Goal 73. Weak Mutation 527: ArrayExamples.isAscending([I)Z:125 - InsertUnaryOp IINC -1 ascending
   */

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayExamples.bubblesort(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  //Test case number: 11
  /*
   * 45 covered goals:
   * Goal 1. ArrayExamples.bubblesort([I)V: I3 Branch 15 IFNE L84 - false
   * Goal 2. ArrayExamples.bubblesort([I)V: I5 Branch 16 IFNONNULL L84 - true
   * Goal 3. ArrayExamples.bubblesort([I)V: I23 Branch 17 IF_ICMPGE L88 - true
   * Goal 4. ArrayExamples.bubblesort([I)V: I120 Branch 24 IFNE L102 - false
   * Goal 5. ArrayExamples.bubblesort([I)V: I123 Branch 25 IFNE L102 - true
   * Goal 6. ArrayExamples.isAscending([I)Z: I11 Branch 27 IFEQ L118 - false
   * Goal 7. ArrayExamples.isAscending([I)Z: I15 Branch 28 IF_ICMPGE L118 - true
   * Goal 8. Branch ArrayExamples.bubblesort([I)V: I5 Branch 16 IFNONNULL L84 - true in context: ArrayExamples:bubblesort([I)V
   * Goal 9. Branch ArrayExamples.bubblesort([I)V: I3 Branch 15 IFNE L84 - false in context: ArrayExamples:bubblesort([I)V
   * Goal 10. Branch ArrayExamples.bubblesort([I)V: I23 Branch 17 IF_ICMPGE L88 - true in context: ArrayExamples:bubblesort([I)V
   * Goal 11. Branch ArrayExamples.bubblesort([I)V: I120 Branch 24 IFNE L102 - false in context: ArrayExamples:bubblesort([I)V
   * Goal 12. Branch ArrayExamples.bubblesort([I)V: I123 Branch 25 IFNE L102 - true in context: ArrayExamples:bubblesort([I)V
   * Goal 13. ArrayExamples.bubblesort([I)V: Line 84
   * Goal 14. ArrayExamples.bubblesort([I)V: Line 87
   * Goal 15. ArrayExamples.bubblesort([I)V: Line 88
   * Goal 16. ArrayExamples.bubblesort([I)V: Line 102
   * Goal 17. ArrayExamples.bubblesort([I)V: Line 103
   * Goal 18. ArrayExamples.isAscending([I)Z: Line 116
   * Goal 19. ArrayExamples.isAscending([I)Z: Line 117
   * Goal 20. ArrayExamples.isAscending([I)Z: Line 118
   * Goal 21. ArrayExamples.isAscending([I)Z: Line 125
   * Goal 22. [METHOD] ArrayExamples.bubblesort([I)V
   * Goal 23. [METHODNOEX] ArrayExamples.bubblesort([I)V
   * Goal 24. Weak Mutation 352: ArrayExamples.bubblesort([I)V:84 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 353: ArrayExamples.bubblesort([I)V:84 - ReplaceComparisonOperator != -> ==
   * Goal 26. Weak Mutation 354: ArrayExamples.bubblesort([I)V:84 - ReplaceComparisonOperator != null -> = null
   * Goal 27. Weak Mutation 356: ArrayExamples.bubblesort([I)V:87 - ReplaceConstant - 1 -> 0
   * Goal 28. Weak Mutation 357: ArrayExamples.bubblesort([I)V:88 - ReplaceConstant - 0 -> 1
   * Goal 29. Weak Mutation 358: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp Negation of i
   * Goal 30. Weak Mutation 359: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp IINC 1 i
   * Goal 31. Weak Mutation 360: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp IINC -1 i
   * Goal 32. Weak Mutation 362: ArrayExamples.bubblesort([I)V:88 - ReplaceComparisonOperator >= -> >
   * Goal 33. Weak Mutation 483: ArrayExamples.isAscending([I)Z:116 - ReplaceConstant - 1 -> 0
   * Goal 34. Weak Mutation 484: ArrayExamples.isAscending([I)Z:117 - ReplaceConstant - 1 -> 0
   * Goal 35. Weak Mutation 485: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp Negation of ascending
   * Goal 36. Weak Mutation 486: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC 1 ascending
   * Goal 37. Weak Mutation 487: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC -1 ascending
   * Goal 38. Weak Mutation 488: ArrayExamples.isAscending([I)Z:118 - ReplaceComparisonOperator == -> !=
   * Goal 39. Weak Mutation 489: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp Negation of index
   * Goal 40. Weak Mutation 490: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC 1 index
   * Goal 41. Weak Mutation 491: ArrayExamples.isAscending([I)Z:118 - InsertUnaryOp IINC -1 index
   * Goal 42. Weak Mutation 494: ArrayExamples.isAscending([I)Z:118 - ReplaceComparisonOperator >= -> ==
   * Goal 43. Weak Mutation 525: ArrayExamples.isAscending([I)Z:125 - InsertUnaryOp Negation of ascending
   * Goal 44. Weak Mutation 526: ArrayExamples.isAscending([I)Z:125 - InsertUnaryOp IINC 1 ascending
   * Goal 45. Weak Mutation 527: ArrayExamples.isAscending([I)Z:125 - InsertUnaryOp IINC -1 ascending
   */

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayExamples.bubblesort(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  //Test case number: 12
  /*
   * 11 covered goals:
   * Goal 1. ArrayExamples.bubblesort([I)V: I3 Branch 15 IFNE L84 - false
   * Goal 2. ArrayExamples.bubblesort([I)V: I5 Branch 16 IFNONNULL L84 - false
   * Goal 3. Branch ArrayExamples.bubblesort([I)V: I5 Branch 16 IFNONNULL L84 - false in context: ArrayExamples:bubblesort([I)V
   * Goal 4. Branch ArrayExamples.bubblesort([I)V: I3 Branch 15 IFNE L84 - false in context: ArrayExamples:bubblesort([I)V
   * Goal 5. bubblesort([I)V_java.lang.AssertionError_EXPLICIT
   * Goal 6. ArrayExamples.bubblesort([I)V: Line 84
   * Goal 7. [METHOD] ArrayExamples.bubblesort([I)V
   * Goal 8. Weak Mutation 352: ArrayExamples.bubblesort([I)V:84 - InsertUnaryOp Negation
   * Goal 9. Weak Mutation 353: ArrayExamples.bubblesort([I)V:84 - ReplaceComparisonOperator != -> ==
   * Goal 10. Weak Mutation 354: ArrayExamples.bubblesort([I)V:84 - ReplaceComparisonOperator != null -> = null
   * Goal 11. Weak Mutation 355: ArrayExamples.bubblesort([I)V:84 - ReplaceConstant - failed precondition -> 
   */

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayExamples.bubblesort((int[]) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // failed precondition
         //
      }
  }

  //Test case number: 13
  /*
   * 11 covered goals:
   * Goal 1. ArrayExamples.findAndPrintPairs([II)V: I3 Branch 10 IFNE L65 - false
   * Goal 2. ArrayExamples.findAndPrintPairs([II)V: I5 Branch 11 IFNONNULL L65 - false
   * Goal 3. Branch ArrayExamples.findAndPrintPairs([II)V: I3 Branch 10 IFNE L65 - false in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 4. Branch ArrayExamples.findAndPrintPairs([II)V: I5 Branch 11 IFNONNULL L65 - false in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 5. findAndPrintPairs([II)V_java.lang.AssertionError_EXPLICIT
   * Goal 6. ArrayExamples.findAndPrintPairs([II)V: Line 65
   * Goal 7. [METHOD] ArrayExamples.findAndPrintPairs([II)V
   * Goal 8. Weak Mutation 268: ArrayExamples.findAndPrintPairs([II)V:65 - InsertUnaryOp Negation
   * Goal 9. Weak Mutation 269: ArrayExamples.findAndPrintPairs([II)V:65 - ReplaceComparisonOperator != -> ==
   * Goal 10. Weak Mutation 270: ArrayExamples.findAndPrintPairs([II)V:65 - ReplaceComparisonOperator != null -> = null
   * Goal 11. Weak Mutation 271: ArrayExamples.findAndPrintPairs([II)V:65 - ReplaceConstant - failed precondition -> 
   */

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayExamples.findAndPrintPairs((int[]) null, 3898);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // failed precondition
         //
      }
  }

  //Test case number: 14
  /*
   * 17 covered goals:
   * Goal 1. ArrayExamples.goodResize([II)[I: I3 Branch 6 IFNE L46 - false
   * Goal 2. ArrayExamples.goodResize([II)[I: I5 Branch 7 IFNULL L46 - false
   * Goal 3. ArrayExamples.goodResize([II)[I: I7 Branch 8 IFGE L46 - false
   * Goal 4. Branch ArrayExamples.goodResize([II)[I: I3 Branch 6 IFNE L46 - false in context: ArrayExamples:goodResize([II)[I
   * Goal 5. Branch ArrayExamples.goodResize([II)[I: I5 Branch 7 IFNULL L46 - false in context: ArrayExamples:goodResize([II)[I
   * Goal 6. Branch ArrayExamples.goodResize([II)[I: I7 Branch 8 IFGE L46 - false in context: ArrayExamples:goodResize([II)[I
   * Goal 7. goodResize([II)[I_java.lang.AssertionError_EXPLICIT
   * Goal 8. ArrayExamples.goodResize([II)[I: Line 46
   * Goal 9. [METHOD] ArrayExamples.goodResize([II)[I
   * Goal 10. Weak Mutation 218: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp Negation
   * Goal 11. Weak Mutation 219: ArrayExamples.goodResize([II)[I:46 - ReplaceComparisonOperator != -> ==
   * Goal 12. Weak Mutation 220: ArrayExamples.goodResize([II)[I:46 - ReplaceComparisonOperator = null -> != null
   * Goal 13. Weak Mutation 221: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp Negation of newSize
   * Goal 14. Weak Mutation 222: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp IINC 1 newSize
   * Goal 15. Weak Mutation 223: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp IINC -1 newSize
   * Goal 16. Weak Mutation 224: ArrayExamples.goodResize([II)[I:46 - ReplaceComparisonOperator >= -> -1
   * Goal 17. Weak Mutation 227: ArrayExamples.goodResize([II)[I:46 - ReplaceConstant - failed precondition -> 
   */

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayExamples.goodResize(intArray0, (-115));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // failed precondition
         //
      }
  }

  //Test case number: 15
  /*
   * 11 covered goals:
   * Goal 1. ArrayExamples.goodResize([II)[I: I3 Branch 6 IFNE L46 - false
   * Goal 2. ArrayExamples.goodResize([II)[I: I5 Branch 7 IFNULL L46 - true
   * Goal 3. Branch ArrayExamples.goodResize([II)[I: I5 Branch 7 IFNULL L46 - true in context: ArrayExamples:goodResize([II)[I
   * Goal 4. Branch ArrayExamples.goodResize([II)[I: I3 Branch 6 IFNE L46 - false in context: ArrayExamples:goodResize([II)[I
   * Goal 5. goodResize([II)[I_java.lang.AssertionError_EXPLICIT
   * Goal 6. ArrayExamples.goodResize([II)[I: Line 46
   * Goal 7. [METHOD] ArrayExamples.goodResize([II)[I
   * Goal 8. Weak Mutation 218: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp Negation
   * Goal 9. Weak Mutation 219: ArrayExamples.goodResize([II)[I:46 - ReplaceComparisonOperator != -> ==
   * Goal 10. Weak Mutation 220: ArrayExamples.goodResize([II)[I:46 - ReplaceComparisonOperator = null -> != null
   * Goal 11. Weak Mutation 227: ArrayExamples.goodResize([II)[I:46 - ReplaceConstant - failed precondition -> 
   */

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayExamples.goodResize((int[]) null, (-221));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // failed precondition
         //
      }
  }

  //Test case number: 16
  /*
   * 129 covered goals:
   * Goal 1. ArrayExamples.goodResize([II)[I: I3 Branch 6 IFNE L46 - false
   * Goal 2. ArrayExamples.goodResize([II)[I: I5 Branch 7 IFNULL L46 - false
   * Goal 3. ArrayExamples.goodResize([II)[I: I7 Branch 8 IFGE L46 - true
   * Goal 4. ArrayExamples.goodResize([II)[I: I33 Branch 9 IF_ICMPGE L51 - true
   * Goal 5. ArrayExamples.goodResize([II)[I: I33 Branch 9 IF_ICMPGE L51 - false
   * Goal 6. ArrayExamples.findAndPrintPairs([II)V: I3 Branch 10 IFNE L65 - false
   * Goal 7. ArrayExamples.findAndPrintPairs([II)V: I5 Branch 11 IFNONNULL L65 - true
   * Goal 8. ArrayExamples.findAndPrintPairs([II)V: I19 Branch 12 IF_ICMPGE L67 - false
   * Goal 9. ArrayExamples.findAndPrintPairs([II)V: I30 Branch 13 IF_ICMPGE L68 - true
   * Goal 10. ArrayExamples.findAndPrintPairs([II)V: I30 Branch 13 IF_ICMPGE L68 - false
   * Goal 11. ArrayExamples.findAndPrintPairs([II)V: I41 Branch 14 IF_ICMPNE L69 - true
   * Goal 12. Branch ArrayExamples.goodResize([II)[I: I3 Branch 6 IFNE L46 - false in context: ArrayExamples:goodResize([II)[I
   * Goal 13. Branch ArrayExamples.goodResize([II)[I: I7 Branch 8 IFGE L46 - true in context: ArrayExamples:goodResize([II)[I
   * Goal 14. Branch ArrayExamples.goodResize([II)[I: I5 Branch 7 IFNULL L46 - false in context: ArrayExamples:goodResize([II)[I
   * Goal 15. Branch ArrayExamples.goodResize([II)[I: I33 Branch 9 IF_ICMPGE L51 - true in context: ArrayExamples:goodResize([II)[I
   * Goal 16. Branch ArrayExamples.goodResize([II)[I: I33 Branch 9 IF_ICMPGE L51 - false in context: ArrayExamples:goodResize([II)[I
   * Goal 17. Branch ArrayExamples.findAndPrintPairs([II)V: I5 Branch 11 IFNONNULL L65 - true in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 18. Branch ArrayExamples.findAndPrintPairs([II)V: I3 Branch 10 IFNE L65 - false in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 19. Branch ArrayExamples.findAndPrintPairs([II)V: I19 Branch 12 IF_ICMPGE L67 - false in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 20. Branch ArrayExamples.findAndPrintPairs([II)V: I30 Branch 13 IF_ICMPGE L68 - false in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 21. Branch ArrayExamples.findAndPrintPairs([II)V: I30 Branch 13 IF_ICMPGE L68 - true in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 22. Branch ArrayExamples.findAndPrintPairs([II)V: I41 Branch 14 IF_ICMPNE L69 - true in context: ArrayExamples:findAndPrintPairs([II)V
   * Goal 23. findAndPrintPairs([II)V_org.evosuite.runtime.TooManyResourcesException_IMPLICIT
   * Goal 24. [Output]: ArrayExamples.goodResize([II)[I:NonEmptyArray
   * Goal 25. ArrayExamples.findAndPrintPairs([II)V: Line 65
   * Goal 26. ArrayExamples.findAndPrintPairs([II)V: Line 67
   * Goal 27. ArrayExamples.findAndPrintPairs([II)V: Line 68
   * Goal 28. ArrayExamples.findAndPrintPairs([II)V: Line 69
   * Goal 29. ArrayExamples.goodResize([II)[I: Line 46
   * Goal 30. ArrayExamples.goodResize([II)[I: Line 48
   * Goal 31. ArrayExamples.goodResize([II)[I: Line 49
   * Goal 32. ArrayExamples.goodResize([II)[I: Line 51
   * Goal 33. ArrayExamples.goodResize([II)[I: Line 52
   * Goal 34. ArrayExamples.goodResize([II)[I: Line 55
   * Goal 35. [METHOD] ArrayExamples.findAndPrintPairs([II)V
   * Goal 36. [METHOD] ArrayExamples.goodResize([II)[I
   * Goal 37. [METHODNOEX] ArrayExamples.goodResize([II)[I
   * Goal 38. Weak Mutation 218: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp Negation
   * Goal 39. Weak Mutation 219: ArrayExamples.goodResize([II)[I:46 - ReplaceComparisonOperator != -> ==
   * Goal 40. Weak Mutation 220: ArrayExamples.goodResize([II)[I:46 - ReplaceComparisonOperator = null -> != null
   * Goal 41. Weak Mutation 221: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp Negation of newSize
   * Goal 42. Weak Mutation 222: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp IINC 1 newSize
   * Goal 43. Weak Mutation 223: ArrayExamples.goodResize([II)[I:46 - InsertUnaryOp IINC -1 newSize
   * Goal 44. Weak Mutation 225: ArrayExamples.goodResize([II)[I:46 - ReplaceComparisonOperator >= -> ==
   * Goal 45. Weak Mutation 228: ArrayExamples.goodResize([II)[I:48 - InsertUnaryOp Negation of newSize
   * Goal 46. Weak Mutation 229: ArrayExamples.goodResize([II)[I:48 - InsertUnaryOp IINC 1 newSize
   * Goal 47. Weak Mutation 230: ArrayExamples.goodResize([II)[I:48 - InsertUnaryOp IINC -1 newSize
   * Goal 48. Weak Mutation 231: ArrayExamples.goodResize([II)[I:49 - ReplaceVariable list -> result
   * Goal 49. Weak Mutation 232: ArrayExamples.goodResize([II)[I:49 - InsertUnaryOp Negation of newSize
   * Goal 50. Weak Mutation 233: ArrayExamples.goodResize([II)[I:49 - InsertUnaryOp IINC 1 newSize
   * Goal 51. Weak Mutation 234: ArrayExamples.goodResize([II)[I:49 - InsertUnaryOp IINC -1 newSize
   * Goal 52. Weak Mutation 235: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> 0
   * Goal 53. Weak Mutation 236: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> 1
   * Goal 54. Weak Mutation 237: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> -1
   * Goal 55. Weak Mutation 238: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> 2
   * Goal 56. Weak Mutation 239: ArrayExamples.goodResize([II)[I:51 - ReplaceConstant - 3 -> 4
   * Goal 57. Weak Mutation 240: ArrayExamples.goodResize([II)[I:51 - ReplaceVariable i -> limit
   * Goal 58. Weak Mutation 241: ArrayExamples.goodResize([II)[I:51 - ReplaceVariable i -> newSize
   * Goal 59. Weak Mutation 242: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp Negation of i
   * Goal 60. Weak Mutation 243: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp IINC 1 i
   * Goal 61. Weak Mutation 244: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp IINC -1 i
   * Goal 62. Weak Mutation 245: ArrayExamples.goodResize([II)[I:51 - ReplaceVariable limit -> i
   * Goal 63. Weak Mutation 246: ArrayExamples.goodResize([II)[I:51 - ReplaceVariable limit -> newSize
   * Goal 64. Weak Mutation 247: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp Negation of limit
   * Goal 65. Weak Mutation 248: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp IINC 1 limit
   * Goal 66. Weak Mutation 249: ArrayExamples.goodResize([II)[I:51 - InsertUnaryOp IINC -1 limit
   * Goal 67. Weak Mutation 250: ArrayExamples.goodResize([II)[I:51 - ReplaceComparisonOperator >= -> -1
   * Goal 68. Weak Mutation 251: ArrayExamples.goodResize([II)[I:51 - ReplaceComparisonOperator >= -> >
   * Goal 69. Weak Mutation 265: ArrayExamples.goodResize([II)[I:51 - ReplaceVariable i -> limit
   * Goal 70. Weak Mutation 266: ArrayExamples.goodResize([II)[I:51 - ReplaceVariable i -> newSize
   * Goal 71. Weak Mutation 253: ArrayExamples.goodResize([II)[I:52 - ReplaceVariable result -> list
   * Goal 72. Weak Mutation 254: ArrayExamples.goodResize([II)[I:52 - ReplaceVariable i -> limit
   * Goal 73. Weak Mutation 255: ArrayExamples.goodResize([II)[I:52 - ReplaceVariable i -> newSize
   * Goal 74. Weak Mutation 256: ArrayExamples.goodResize([II)[I:52 - InsertUnaryOp Negation of i
   * Goal 75. Weak Mutation 257: ArrayExamples.goodResize([II)[I:52 - InsertUnaryOp IINC 1 i
   * Goal 76. Weak Mutation 258: ArrayExamples.goodResize([II)[I:52 - InsertUnaryOp IINC -1 i
   * Goal 77. Weak Mutation 259: ArrayExamples.goodResize([II)[I:52 - ReplaceVariable list -> result
   * Goal 78. Weak Mutation 260: ArrayExamples.goodResize([II)[I:52 - ReplaceVariable i -> limit
   * Goal 79. Weak Mutation 261: ArrayExamples.goodResize([II)[I:52 - ReplaceVariable i -> newSize
   * Goal 80. Weak Mutation 262: ArrayExamples.goodResize([II)[I:52 - InsertUnaryOp Negation of i
   * Goal 81. Weak Mutation 263: ArrayExamples.goodResize([II)[I:52 - InsertUnaryOp IINC 1 i
   * Goal 82. Weak Mutation 264: ArrayExamples.goodResize([II)[I:52 - InsertUnaryOp IINC -1 i
   * Goal 83. Weak Mutation 267: ArrayExamples.goodResize([II)[I:55 - ReplaceVariable result -> list
   * Goal 84. Weak Mutation 268: ArrayExamples.findAndPrintPairs([II)V:65 - InsertUnaryOp Negation
   * Goal 85. Weak Mutation 269: ArrayExamples.findAndPrintPairs([II)V:65 - ReplaceComparisonOperator != -> ==
   * Goal 86. Weak Mutation 270: ArrayExamples.findAndPrintPairs([II)V:65 - ReplaceComparisonOperator != null -> = null
   * Goal 87. Weak Mutation 272: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceConstant - 0 -> 1
   * Goal 88. Weak Mutation 273: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceVariable i -> target
   * Goal 89. Weak Mutation 274: ArrayExamples.findAndPrintPairs([II)V:67 - InsertUnaryOp Negation of i
   * Goal 90. Weak Mutation 275: ArrayExamples.findAndPrintPairs([II)V:67 - InsertUnaryOp IINC 1 i
   * Goal 91. Weak Mutation 276: ArrayExamples.findAndPrintPairs([II)V:67 - InsertUnaryOp IINC -1 i
   * Goal 92. Weak Mutation 277: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceComparisonOperator >= -> -1
   * Goal 93. Weak Mutation 351: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceVariable i -> target
   * Goal 94. Weak Mutation 280: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable i -> target
   * Goal 95. Weak Mutation 281: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp Negation of i
   * Goal 96. Weak Mutation 282: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC 1 i
   * Goal 97. Weak Mutation 283: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC -1 i
   * Goal 98. Weak Mutation 284: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceConstant - 1 -> 0
   * Goal 99. Weak Mutation 285: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> %
   * Goal 100. Weak Mutation 286: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> -
   * Goal 101. Weak Mutation 287: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> *
   * Goal 102. Weak Mutation 288: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> /
   * Goal 103. Weak Mutation 289: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> i
   * Goal 104. Weak Mutation 290: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> target
   * Goal 105. Weak Mutation 291: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp Negation of j
   * Goal 106. Weak Mutation 292: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC 1 j
   * Goal 107. Weak Mutation 293: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC -1 j
   * Goal 108. Weak Mutation 294: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceComparisonOperator >= -> -1
   * Goal 109. Weak Mutation 295: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceComparisonOperator >= -> >
   * Goal 110. Weak Mutation 349: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> i
   * Goal 111. Weak Mutation 350: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> target
   * Goal 112. Weak Mutation 297: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable i -> j
   * Goal 113. Weak Mutation 298: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable i -> target
   * Goal 114. Weak Mutation 299: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp Negation of i
   * Goal 115. Weak Mutation 300: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC 1 i
   * Goal 116. Weak Mutation 301: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC -1 i
   * Goal 117. Weak Mutation 302: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable j -> i
   * Goal 118. Weak Mutation 303: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable j -> target
   * Goal 119. Weak Mutation 304: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp Negation of j
   * Goal 120. Weak Mutation 305: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC 1 j
   * Goal 121. Weak Mutation 306: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC -1 j
   * Goal 122. Weak Mutation 307: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceArithmeticOperator + -> %
   * Goal 123. Weak Mutation 310: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceArithmeticOperator + -> /
   * Goal 124. Weak Mutation 311: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable target -> i
   * Goal 125. Weak Mutation 312: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable target -> j
   * Goal 126. Weak Mutation 313: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp Negation of target
   * Goal 127. Weak Mutation 314: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC 1 target
   * Goal 128. Weak Mutation 315: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC -1 target
   * Goal 129. Weak Mutation 317: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceComparisonOperator != -> <
   */

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayExamples.goodResize(intArray0, 1272);
      // Undeclared exception!
      try { 
        ArrayExamples.findAndPrintPairs(intArray1, (-1));
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(AssertionError e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
       //  assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  //Test case number: 17
  /*
   * 29 covered goals:
   * Goal 1. ArrayExamples.findMin([I)I: I3 Branch 1 IFNE L27 - false
   * Goal 2. ArrayExamples.findMin([I)I: I5 Branch 2 IFNULL L27 - false
   * Goal 3. ArrayExamples.findMin([I)I: I8 Branch 3 IFGT L27 - true
   * Goal 4. ArrayExamples.findMin([I)I: I27 Branch 4 IF_ICMPLE L30 - true
   * Goal 5. Branch ArrayExamples.findMin([I)I: I8 Branch 3 IFGT L27 - true in context: ArrayExamples:findMin([I)I
   * Goal 6. Branch ArrayExamples.findMin([I)I: I5 Branch 2 IFNULL L27 - false in context: ArrayExamples:findMin([I)I
   * Goal 7. Branch ArrayExamples.findMin([I)I: I3 Branch 1 IFNE L27 - false in context: ArrayExamples:findMin([I)I
   * Goal 8. Branch ArrayExamples.findMin([I)I: I27 Branch 4 IF_ICMPLE L30 - true in context: ArrayExamples:findMin([I)I
   * Goal 9. [Output]: ArrayExamples.findMin([I)I:Zero
   * Goal 10. ArrayExamples.findMin([I)I: Line 27
   * Goal 11. ArrayExamples.findMin([I)I: Line 29
   * Goal 12. ArrayExamples.findMin([I)I: Line 30
   * Goal 13. ArrayExamples.findMin([I)I: Line 36
   * Goal 14. [METHOD] ArrayExamples.findMin([I)I
   * Goal 15. [METHODNOEX] ArrayExamples.findMin([I)I
   * Goal 16. Weak Mutation 183: ArrayExamples.findMin([I)I:27 - InsertUnaryOp Negation
   * Goal 17. Weak Mutation 184: ArrayExamples.findMin([I)I:27 - ReplaceComparisonOperator != -> ==
   * Goal 18. Weak Mutation 185: ArrayExamples.findMin([I)I:27 - ReplaceComparisonOperator = null -> != null
   * Goal 19. Weak Mutation 186: ArrayExamples.findMin([I)I:27 - ReplaceComparisonOperator > -> -2
   * Goal 20. Weak Mutation 190: ArrayExamples.findMin([I)I:29 - ReplaceConstant - 0 -> 1
   * Goal 21. Weak Mutation 191: ArrayExamples.findMin([I)I:30 - ReplaceConstant - 1 -> 0
   * Goal 22. Weak Mutation 192: ArrayExamples.findMin([I)I:30 - ReplaceVariable i -> indexOfMin
   * Goal 23. Weak Mutation 193: ArrayExamples.findMin([I)I:30 - InsertUnaryOp Negation of i
   * Goal 24. Weak Mutation 194: ArrayExamples.findMin([I)I:30 - InsertUnaryOp IINC 1 i
   * Goal 25. Weak Mutation 195: ArrayExamples.findMin([I)I:30 - InsertUnaryOp IINC -1 i
   * Goal 26. Weak Mutation 198: ArrayExamples.findMin([I)I:30 - ReplaceComparisonOperator <= -> ==
   * Goal 27. Weak Mutation 215: ArrayExamples.findMin([I)I:36 - InsertUnaryOp Negation of indexOfMin
   * Goal 28. Weak Mutation 216: ArrayExamples.findMin([I)I:36 - InsertUnaryOp IINC 1 indexOfMin
   * Goal 29. Weak Mutation 217: ArrayExamples.findMin([I)I:36 - InsertUnaryOp IINC -1 indexOfMin
   */

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayExamples.findMin(intArray0);
      assertEquals(0, int0);
  }

  //Test case number: 18
  /*
   * 11 covered goals:
   * Goal 1. ArrayExamples.findMin([I)I: I3 Branch 1 IFNE L27 - false
   * Goal 2. ArrayExamples.findMin([I)I: I5 Branch 2 IFNULL L27 - true
   * Goal 3. Branch ArrayExamples.findMin([I)I: I5 Branch 2 IFNULL L27 - true in context: ArrayExamples:findMin([I)I
   * Goal 4. Branch ArrayExamples.findMin([I)I: I3 Branch 1 IFNE L27 - false in context: ArrayExamples:findMin([I)I
   * Goal 5. findMin([I)I_java.lang.AssertionError_EXPLICIT
   * Goal 6. ArrayExamples.findMin([I)I: Line 27
   * Goal 7. [METHOD] ArrayExamples.findMin([I)I
   * Goal 8. Weak Mutation 183: ArrayExamples.findMin([I)I:27 - InsertUnaryOp Negation
   * Goal 9. Weak Mutation 184: ArrayExamples.findMin([I)I:27 - ReplaceComparisonOperator != -> ==
   * Goal 10. Weak Mutation 185: ArrayExamples.findMin([I)I:27 - ReplaceComparisonOperator = null -> != null
   * Goal 11. Weak Mutation 189: ArrayExamples.findMin([I)I:27 - ReplaceConstant - failed precondition -> 
   */

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayExamples.findMin((int[]) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // failed precondition
         //
      }
  }

  //Test case number: 19
  /*
   * 14 covered goals:
   * Goal 1. ArrayExamples.findMin([I)I: I3 Branch 1 IFNE L27 - false
   * Goal 2. ArrayExamples.findMin([I)I: I5 Branch 2 IFNULL L27 - false
   * Goal 3. ArrayExamples.findMin([I)I: I8 Branch 3 IFGT L27 - false
   * Goal 4. Branch ArrayExamples.findMin([I)I: I5 Branch 2 IFNULL L27 - false in context: ArrayExamples:findMin([I)I
   * Goal 5. Branch ArrayExamples.findMin([I)I: I8 Branch 3 IFGT L27 - false in context: ArrayExamples:findMin([I)I
   * Goal 6. Branch ArrayExamples.findMin([I)I: I3 Branch 1 IFNE L27 - false in context: ArrayExamples:findMin([I)I
   * Goal 7. findMin([I)I_java.lang.AssertionError_EXPLICIT
   * Goal 8. ArrayExamples.findMin([I)I: Line 27
   * Goal 9. [METHOD] ArrayExamples.findMin([I)I
   * Goal 10. Weak Mutation 183: ArrayExamples.findMin([I)I:27 - InsertUnaryOp Negation
   * Goal 11. Weak Mutation 184: ArrayExamples.findMin([I)I:27 - ReplaceComparisonOperator != -> ==
   * Goal 12. Weak Mutation 185: ArrayExamples.findMin([I)I:27 - ReplaceComparisonOperator = null -> != null
   * Goal 13. Weak Mutation 188: ArrayExamples.findMin([I)I:27 - ReplaceComparisonOperator > -> >=
   * Goal 14. Weak Mutation 189: ArrayExamples.findMin([I)I:27 - ReplaceConstant - failed precondition -> 
   */

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayExamples.findMin(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // failed precondition
         //
      }
  }

  //Test case number: 20
  /*
   * 216 covered goals:
   * Goal 1. ArrayExamples.main([Ljava/lang/String;)V: root-Branch
   * Goal 2. ArrayExamples.findAndPrintPairs([II)V: I3 Branch 10 IFNE L65 - false
   * Goal 3. ArrayExamples.findAndPrintPairs([II)V: I5 Branch 11 IFNONNULL L65 - true
   * Goal 4. ArrayExamples.findAndPrintPairs([II)V: I19 Branch 12 IF_ICMPGE L67 - true
   * Goal 5. ArrayExamples.findAndPrintPairs([II)V: I19 Branch 12 IF_ICMPGE L67 - false
   * Goal 6. ArrayExamples.findAndPrintPairs([II)V: I30 Branch 13 IF_ICMPGE L68 - true
   * Goal 7. ArrayExamples.findAndPrintPairs([II)V: I30 Branch 13 IF_ICMPGE L68 - false
   * Goal 8. ArrayExamples.findAndPrintPairs([II)V: I41 Branch 14 IF_ICMPNE L69 - true
   * Goal 9. ArrayExamples.findAndPrintPairs([II)V: I41 Branch 14 IF_ICMPNE L69 - false
   * Goal 10. ArrayExamples.bubblesort([I)V: I3 Branch 15 IFNE L84 - false
   * Goal 11. ArrayExamples.bubblesort([I)V: I5 Branch 16 IFNONNULL L84 - true
   * Goal 12. ArrayExamples.bubblesort([I)V: I23 Branch 17 IF_ICMPGE L88 - false
   * Goal 13. ArrayExamples.bubblesort([I)V: I25 Branch 18 IFEQ L88 - false
   * Goal 14. ArrayExamples.bubblesort([I)V: I42 Branch 19 IF_ICMPGE L90 - false
   * Goal 15. ArrayExamples.bubblesort([I)V: I46 Branch 20 IFNE L91 - false
   * Goal 16. ArrayExamples.bubblesort([I)V: I48 Branch 21 IFLE L91 - true
   * Goal 17. Branch ArrayExamples.main([Ljava/lang/String;)V: root-Branch in context: ArrayExamples:main([Ljava/lang/String;)V
   * Goal 18. main([Ljava/lang/String;)V_java.lang.AssertionError_EXPLICIT
   * Goal 19. ArrayExamples.bubblesort([I)V: Line 84
   * Goal 20. ArrayExamples.bubblesort([I)V: Line 87
   * Goal 21. ArrayExamples.bubblesort([I)V: Line 88
   * Goal 22. ArrayExamples.bubblesort([I)V: Line 89
   * Goal 23. ArrayExamples.bubblesort([I)V: Line 90
   * Goal 24. ArrayExamples.bubblesort([I)V: Line 91
   * Goal 25. ArrayExamples.findAndPrintPairs([II)V: Line 65
   * Goal 26. ArrayExamples.findAndPrintPairs([II)V: Line 67
   * Goal 27. ArrayExamples.findAndPrintPairs([II)V: Line 68
   * Goal 28. ArrayExamples.findAndPrintPairs([II)V: Line 69
   * Goal 29. ArrayExamples.findAndPrintPairs([II)V: Line 70
   * Goal 30. ArrayExamples.findAndPrintPairs([II)V: Line 75
   * Goal 31. ArrayExamples.main([Ljava/lang/String;)V: Line 5
   * Goal 32. ArrayExamples.main([Ljava/lang/String;)V: Line 6
   * Goal 33. ArrayExamples.main([Ljava/lang/String;)V: Line 7
   * Goal 34. [METHOD] ArrayExamples.main([Ljava/lang/String;)V
   * Goal 35. Weak Mutation 0: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 7 -> 0
   * Goal 36. Weak Mutation 1: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 7 -> 1
   * Goal 37. Weak Mutation 2: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 7 -> -1
   * Goal 38. Weak Mutation 3: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 7 -> 6
   * Goal 39. Weak Mutation 4: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 7 -> 8
   * Goal 40. Weak Mutation 5: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 0 -> 1
   * Goal 41. Weak Mutation 6: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 1 -> 0
   * Goal 42. Weak Mutation 7: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 1 -> 0
   * Goal 43. Weak Mutation 8: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 2 -> 0
   * Goal 44. Weak Mutation 9: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 2 -> 1
   * Goal 45. Weak Mutation 10: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 2 -> -1
   * Goal 46. Weak Mutation 11: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 2 -> 3
   * Goal 47. Weak Mutation 12: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 2 -> 0
   * Goal 48. Weak Mutation 13: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 2 -> 1
   * Goal 49. Weak Mutation 14: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 2 -> -1
   * Goal 50. Weak Mutation 15: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 2 -> 3
   * Goal 51. Weak Mutation 16: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> 0
   * Goal 52. Weak Mutation 17: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> 1
   * Goal 53. Weak Mutation 18: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> -1
   * Goal 54. Weak Mutation 19: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> 2
   * Goal 55. Weak Mutation 20: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> 4
   * Goal 56. Weak Mutation 21: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> 0
   * Goal 57. Weak Mutation 22: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> 1
   * Goal 58. Weak Mutation 23: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> -1
   * Goal 59. Weak Mutation 24: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> 2
   * Goal 60. Weak Mutation 25: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> 4
   * Goal 61. Weak Mutation 26: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 4 -> 0
   * Goal 62. Weak Mutation 27: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 4 -> 1
   * Goal 63. Weak Mutation 28: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 4 -> -1
   * Goal 64. Weak Mutation 29: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 4 -> 3
   * Goal 65. Weak Mutation 30: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 4 -> 5
   * Goal 66. Weak Mutation 31: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 4 -> 0
   * Goal 67. Weak Mutation 32: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 4 -> 1
   * Goal 68. Weak Mutation 33: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 4 -> -1
   * Goal 69. Weak Mutation 34: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 4 -> 3
   * Goal 70. Weak Mutation 35: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 4 -> 5
   * Goal 71. Weak Mutation 36: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 1 -> 0
   * Goal 72. Weak Mutation 37: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 5 -> 0
   * Goal 73. Weak Mutation 38: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 5 -> 1
   * Goal 74. Weak Mutation 39: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 5 -> -1
   * Goal 75. Weak Mutation 40: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 5 -> 4
   * Goal 76. Weak Mutation 41: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 5 -> 6
   * Goal 77. Weak Mutation 42: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 2 -> 0
   * Goal 78. Weak Mutation 43: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 2 -> 1
   * Goal 79. Weak Mutation 44: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 2 -> -1
   * Goal 80. Weak Mutation 45: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 2 -> 3
   * Goal 81. Weak Mutation 46: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 6 -> 0
   * Goal 82. Weak Mutation 47: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 6 -> 1
   * Goal 83. Weak Mutation 48: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 6 -> -1
   * Goal 84. Weak Mutation 49: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 6 -> 5
   * Goal 85. Weak Mutation 50: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 6 -> 7
   * Goal 86. Weak Mutation 51: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> 0
   * Goal 87. Weak Mutation 52: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> 1
   * Goal 88. Weak Mutation 53: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> -1
   * Goal 89. Weak Mutation 54: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> 2
   * Goal 90. Weak Mutation 55: ArrayExamples.main([Ljava/lang/String;)V:5 - ReplaceConstant - 3 -> 4
   * Goal 91. Weak Mutation 56: ArrayExamples.main([Ljava/lang/String;)V:6 - ReplaceConstant - 5 -> 0
   * Goal 92. Weak Mutation 57: ArrayExamples.main([Ljava/lang/String;)V:6 - ReplaceConstant - 5 -> 1
   * Goal 93. Weak Mutation 58: ArrayExamples.main([Ljava/lang/String;)V:6 - ReplaceConstant - 5 -> -1
   * Goal 94. Weak Mutation 59: ArrayExamples.main([Ljava/lang/String;)V:6 - ReplaceConstant - 5 -> 4
   * Goal 95. Weak Mutation 60: ArrayExamples.main([Ljava/lang/String;)V:6 - ReplaceConstant - 5 -> 6
   * Goal 96. Weak Mutation 268: ArrayExamples.findAndPrintPairs([II)V:65 - InsertUnaryOp Negation
   * Goal 97. Weak Mutation 269: ArrayExamples.findAndPrintPairs([II)V:65 - ReplaceComparisonOperator != -> ==
   * Goal 98. Weak Mutation 270: ArrayExamples.findAndPrintPairs([II)V:65 - ReplaceComparisonOperator != null -> = null
   * Goal 99. Weak Mutation 272: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceConstant - 0 -> 1
   * Goal 100. Weak Mutation 273: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceVariable i -> target
   * Goal 101. Weak Mutation 274: ArrayExamples.findAndPrintPairs([II)V:67 - InsertUnaryOp Negation of i
   * Goal 102. Weak Mutation 275: ArrayExamples.findAndPrintPairs([II)V:67 - InsertUnaryOp IINC 1 i
   * Goal 103. Weak Mutation 276: ArrayExamples.findAndPrintPairs([II)V:67 - InsertUnaryOp IINC -1 i
   * Goal 104. Weak Mutation 277: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceComparisonOperator >= -> -1
   * Goal 105. Weak Mutation 278: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceComparisonOperator >= -> >
   * Goal 106. Weak Mutation 351: ArrayExamples.findAndPrintPairs([II)V:67 - ReplaceVariable i -> target
   * Goal 107. Weak Mutation 280: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable i -> target
   * Goal 108. Weak Mutation 281: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp Negation of i
   * Goal 109. Weak Mutation 282: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC 1 i
   * Goal 110. Weak Mutation 283: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC -1 i
   * Goal 111. Weak Mutation 284: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceConstant - 1 -> 0
   * Goal 112. Weak Mutation 285: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> %
   * Goal 113. Weak Mutation 286: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> -
   * Goal 114. Weak Mutation 287: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> *
   * Goal 115. Weak Mutation 288: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceArithmeticOperator + -> /
   * Goal 116. Weak Mutation 289: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> i
   * Goal 117. Weak Mutation 290: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> target
   * Goal 118. Weak Mutation 291: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp Negation of j
   * Goal 119. Weak Mutation 292: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC 1 j
   * Goal 120. Weak Mutation 293: ArrayExamples.findAndPrintPairs([II)V:68 - InsertUnaryOp IINC -1 j
   * Goal 121. Weak Mutation 294: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceComparisonOperator >= -> -1
   * Goal 122. Weak Mutation 295: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceComparisonOperator >= -> >
   * Goal 123. Weak Mutation 349: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> i
   * Goal 124. Weak Mutation 350: ArrayExamples.findAndPrintPairs([II)V:68 - ReplaceVariable j -> target
   * Goal 125. Weak Mutation 297: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable i -> j
   * Goal 126. Weak Mutation 298: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable i -> target
   * Goal 127. Weak Mutation 299: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp Negation of i
   * Goal 128. Weak Mutation 300: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC 1 i
   * Goal 129. Weak Mutation 301: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC -1 i
   * Goal 130. Weak Mutation 302: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable j -> i
   * Goal 131. Weak Mutation 303: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable j -> target
   * Goal 132. Weak Mutation 304: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp Negation of j
   * Goal 133. Weak Mutation 305: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC 1 j
   * Goal 134. Weak Mutation 306: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC -1 j
   * Goal 135. Weak Mutation 307: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceArithmeticOperator + -> %
   * Goal 136. Weak Mutation 308: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceArithmeticOperator + -> -
   * Goal 137. Weak Mutation 309: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceArithmeticOperator + -> *
   * Goal 138. Weak Mutation 310: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceArithmeticOperator + -> /
   * Goal 139. Weak Mutation 311: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable target -> i
   * Goal 140. Weak Mutation 312: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceVariable target -> j
   * Goal 141. Weak Mutation 313: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp Negation of target
   * Goal 142. Weak Mutation 314: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC 1 target
   * Goal 143. Weak Mutation 315: ArrayExamples.findAndPrintPairs([II)V:69 - InsertUnaryOp IINC -1 target
   * Goal 144. Weak Mutation 316: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceComparisonOperator != -> -1
   * Goal 145. Weak Mutation 317: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceComparisonOperator != -> <
   * Goal 146. Weak Mutation 318: ArrayExamples.findAndPrintPairs([II)V:69 - ReplaceComparisonOperator != -> >
   * Goal 147. Weak Mutation 319: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceConstant - The two elements at indices  -> 
   * Goal 148. Weak Mutation 320: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable i -> j
   * Goal 149. Weak Mutation 321: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable i -> target
   * Goal 150. Weak Mutation 322: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp Negation of i
   * Goal 151. Weak Mutation 323: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC 1 i
   * Goal 152. Weak Mutation 324: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC -1 i
   * Goal 153. Weak Mutation 325: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceConstant -  and  -> 
   * Goal 154. Weak Mutation 326: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable j -> i
   * Goal 155. Weak Mutation 327: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable j -> target
   * Goal 156. Weak Mutation 328: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp Negation of j
   * Goal 157. Weak Mutation 329: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC 1 j
   * Goal 158. Weak Mutation 330: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC -1 j
   * Goal 159. Weak Mutation 331: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceConstant -  are  -> 
   * Goal 160. Weak Mutation 332: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable i -> j
   * Goal 161. Weak Mutation 333: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable i -> target
   * Goal 162. Weak Mutation 334: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp Negation of i
   * Goal 163. Weak Mutation 335: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC 1 i
   * Goal 164. Weak Mutation 336: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC -1 i
   * Goal 165. Weak Mutation 337: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceConstant -  and  -> 
   * Goal 166. Weak Mutation 338: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable j -> i
   * Goal 167. Weak Mutation 339: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable j -> target
   * Goal 168. Weak Mutation 340: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp Negation of j
   * Goal 169. Weak Mutation 341: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC 1 j
   * Goal 170. Weak Mutation 342: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC -1 j
   * Goal 171. Weak Mutation 343: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceConstant -  add up to  -> 
   * Goal 172. Weak Mutation 344: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable target -> i
   * Goal 173. Weak Mutation 345: ArrayExamples.findAndPrintPairs([II)V:70 - ReplaceVariable target -> j
   * Goal 174. Weak Mutation 346: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp Negation of target
   * Goal 175. Weak Mutation 347: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC 1 target
   * Goal 176. Weak Mutation 348: ArrayExamples.findAndPrintPairs([II)V:70 - InsertUnaryOp IINC -1 target
   * Goal 177. Weak Mutation 352: ArrayExamples.bubblesort([I)V:84 - InsertUnaryOp Negation
   * Goal 178. Weak Mutation 353: ArrayExamples.bubblesort([I)V:84 - ReplaceComparisonOperator != -> ==
   * Goal 179. Weak Mutation 354: ArrayExamples.bubblesort([I)V:84 - ReplaceComparisonOperator != null -> = null
   * Goal 180. Weak Mutation 356: ArrayExamples.bubblesort([I)V:87 - ReplaceConstant - 1 -> 0
   * Goal 181. Weak Mutation 357: ArrayExamples.bubblesort([I)V:88 - ReplaceConstant - 0 -> 1
   * Goal 182. Weak Mutation 358: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp Negation of i
   * Goal 183. Weak Mutation 359: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp IINC 1 i
   * Goal 184. Weak Mutation 360: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp IINC -1 i
   * Goal 185. Weak Mutation 361: ArrayExamples.bubblesort([I)V:88 - ReplaceComparisonOperator >= -> -1
   * Goal 186. Weak Mutation 364: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp Negation of changed
   * Goal 187. Weak Mutation 365: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp IINC 1 changed
   * Goal 188. Weak Mutation 366: ArrayExamples.bubblesort([I)V:88 - InsertUnaryOp IINC -1 changed
   * Goal 189. Weak Mutation 367: ArrayExamples.bubblesort([I)V:88 - ReplaceComparisonOperator == -> !=
   * Goal 190. Weak Mutation 368: ArrayExamples.bubblesort([I)V:89 - ReplaceConstant - 0 -> 1
   * Goal 191. Weak Mutation 369: ArrayExamples.bubblesort([I)V:90 - ReplaceConstant - 0 -> 1
   * Goal 192. Weak Mutation 371: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp Negation of j
   * Goal 193. Weak Mutation 372: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp IINC 1 j
   * Goal 194. Weak Mutation 373: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp IINC -1 j
   * Goal 195. Weak Mutation 375: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp Negation of i
   * Goal 196. Weak Mutation 376: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp IINC 1 i
   * Goal 197. Weak Mutation 377: ArrayExamples.bubblesort([I)V:90 - InsertUnaryOp IINC -1 i
   * Goal 198. Weak Mutation 379: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> %
   * Goal 199. Weak Mutation 381: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> /
   * Goal 200. Weak Mutation 382: ArrayExamples.bubblesort([I)V:90 - ReplaceConstant - 1 -> 0
   * Goal 201. Weak Mutation 383: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> +
   * Goal 202. Weak Mutation 384: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> %
   * Goal 203. Weak Mutation 385: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> *
   * Goal 204. Weak Mutation 386: ArrayExamples.bubblesort([I)V:90 - ReplaceArithmeticOperator - -> /
   * Goal 205. Weak Mutation 387: ArrayExamples.bubblesort([I)V:90 - ReplaceComparisonOperator >= -> -1
   * Goal 206. Weak Mutation 390: ArrayExamples.bubblesort([I)V:91 - InsertUnaryOp Negation
   * Goal 207. Weak Mutation 391: ArrayExamples.bubblesort([I)V:91 - ReplaceComparisonOperator != -> ==
   * Goal 208. Weak Mutation 393: ArrayExamples.bubblesort([I)V:91 - InsertUnaryOp Negation of j
   * Goal 209. Weak Mutation 394: ArrayExamples.bubblesort([I)V:91 - InsertUnaryOp IINC 1 j
   * Goal 210. Weak Mutation 395: ArrayExamples.bubblesort([I)V:91 - InsertUnaryOp IINC -1 j
   * Goal 211. Weak Mutation 398: ArrayExamples.bubblesort([I)V:91 - ReplaceComparisonOperator <= -> <
   * Goal 212. Weak Mutation 411: ArrayExamples.bubblesort([I)V:91 - ReplaceConstant - loop counter j  -> 
   * Goal 213. Weak Mutation 413: ArrayExamples.bubblesort([I)V:91 - InsertUnaryOp Negation of j
   * Goal 214. Weak Mutation 414: ArrayExamples.bubblesort([I)V:91 - InsertUnaryOp IINC 1 j
   * Goal 215. Weak Mutation 415: ArrayExamples.bubblesort([I)V:91 - InsertUnaryOp IINC -1 j
   * Goal 216. Weak Mutation 416: ArrayExamples.bubblesort([I)V:91 - ReplaceConstant - is out of bounds. -> 
   */

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        ArrayExamples.main(stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // loop counter j 0is out of bounds.
         //
      }
  }

  //Test case number: 21
  /*
   * 4 covered goals:
   * Goal 1. ArrayExamples.<init>()V: root-Branch
   * Goal 2. Branch ArrayExamples.<init>()V: root-Branch in context: ArrayExamples:<init>()V
   * Goal 3. [METHOD] ArrayExamples.<init>()V
   * Goal 4. [METHODNOEX] ArrayExamples.<init>()V
   */

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayExamples arrayExamples0 = new ArrayExamples();
  }
}
